}
return(cost)
}
## Function to calculate totalcost
totalCost <- function(T, M0, b, d, tau, L){
n <- length(T)
M <- c()
for(i in 1:n){
M[i] <-  M0[i] + b[i]*min(T[i],L) + d[i]*as.numeric(T[i] <= L)  + annCost(T[i], tau[,i], L)
}
return(M)
}
## Function to simulate cost data
## n is number of individuals to simulate
## dist is survival distribution either "unif" = unif(0,10) o r "exp" = exp (1/6)
## censor is "light" or "heavy" for unif(0,20) or unif(0,12.5)
## L is number of years to summarize over
simCostData <- function(n = 100, dist = "unif", censor = "light", L = 10){
## Simulate survival times
if(dist == "unif"){
T <- runif(n = n, min = 0, max = 10)
} else{
if(dist == "exp"){
T <- rexp(n = n, rate = 1/6)
} else{
stop('Dist must be "unif" or "exp"')
}
}
## Simulate censoring
if(censor == "light"){
C <- runif(n = n, min = 0, max = 20)
} else{
if(censor == "heavy"){
C <- runif(n = n, min = 0, max = 12.5)
} else{
stop('censor must be "light" or "heavy"')
}
}
## Simulate cost parameters
M0  <- runif(n = n, min = 5000,  max = 15000) # Initial Cost
b   <- runif(n = n, min = 1000,  max = 2600)  # Deterministic annual cost
d   <- runif(n = n, min = 10000, max = 30000) # Terminal cost
tau <- matrix(data = runif(n = n*L, min = 0, max = 400), ncol = 100)   # Random annual cost
## Calculate total cost for individuals over L years
M <- totalCost(T, M0, b, d, tau, L)
## Calculate follow-up and censoring indicator
X <- pmin(T, C, L)
delta <- as.integer(T < C & T < L)
## Columns for dataframe with censored cost history
upperTime <- ceiling(X)
id    = rep(1:n, times = upperTime)
start = (unlist(sapply(upperTime, function(x) 1:x)) - 1)
stop  = unlist(sapply(upperTime, function(x) 1:x))
t     = rep(X, times = upperTime)
delta = rep(delta, times = upperTime)
## Calculate censored cost history in each interval / individual
cost <- 0
for(i in 1:length(id)){
cost[i] <- as.integer(start[i] == 0) * M0[id[i]] +   ## Initial cost if first interval
min(1, t[i] - stop[i] + 1) * b[id[i]] +            ## Fixed annual cost
min(1, t[i] - stop[i] + 1) * tau[stop[i], id[i]] + ## Random annual cost
as.integer(t[i] <= stop[i]) * delta[i] * d[id[i]]  ## Terminal cost if last interval and not censored
}
## Build output
results <- data.frame(id, start, stop, cost,"surv" = t, delta)
Mcens <- tapply(cost, id, sum)
return(list("totalCost" = M, "censoredCostHistory" = results))
}
#####################
# Martin sim
#####################
# Transition rate matrix for the illness-death model with recovery
# State 1: No treatment; State 2: Treatment; State 3: Death; State 4: Censoring
sim.patients <- function(n, censor=0.05, cost){
lam12 <-  0.2
lam21 <-  0.5
lam13 <-  0.1
lam14 <- censor
lam23 <-  0.1
lam24 <- censor
qmatrix <- rbind(
c(   -1,    lam12,   lam13,  lam14),
c(lam21,       -1,   lam23,  lam24),
c(    0,        0,      -1,      0),
c(    0,        0,       0,     -1))
# Simulate n patients with transition rate matrix qmatrix and exponential
# cost/time-unit distribtion
xxx <- data.frame(id = character(), times = numeric(), state = numeric(), cost = numeric())
for(i in 1:n){
tmp <- sim.msm(qmatrix, maxtime = Inf)
tmp <- data.frame(i, tmp$times, tmp$states, 0)
names(tmp) <- c("id", "times", "state", "cost")
for(j in 1:nrow(tmp))
if(tmp$state[j] == 2) tmp$cost[j] <- rexp(1,rate = 1/cost)
xxx <- rbind(xxx,tmp)
}
xxx$surv <- ifelse(xxx$state > 2, xxx$times, 0)
xxx$delta <- ifelse(xxx$state == 3, 1, 0)
xxx$start <- xxx$times
xxx$stop <- NA
xxx$stop <- ifelse(xxx$id == xxx$id[-1], xxx$times[-1],0)
sim <- xxx %>%
group_by(id) %>%
mutate(delta = max(delta),
surv = max(surv),
cost2 = ifelse(max(cost) == 0, NA, max(cost)))
#sim <- subset(sim, sim$cost != 0 | (is.na(sim$cost2) & state == 1))
# Calculate the cost per patient
cost <- 0
n.ids <- length(unique(sim$id))
simcost <- rep(0,n.ids)
for(i in 1:n.ids){
tmp <- sim[sim$id == i,]
simcost[i] <- sum(diff(tmp$times)*head(tmp$cost, -1))
}
return(list("totalCost" = simcost, "censoredCostHistory" = sim))
}
exact.cost <- function(lam, mu, gamma, delta){
# Function to calculate the exact cost in the illness-death model with recovery
f <- function(x, lam, mu, gamma, delta){
lam/(lam + mu)*(x + exp(-1*(lam+mu)*x)/(lam+mu) - 1/(lam+mu)) * (gamma*exp(-1*gamma*x)) * delta
#lam/(lam + mu)*(1-exp(-1*(lam+mu)*x)) * (gamma*exp(-1*gamma*x)) * delta
}
integrate(f, 0, Inf, lam, mu, gamma, delta)
}
#####################
# Martin sim end
#####################
nSim   <- 10
nYears <- 10
## true mean for unif is 40000 and
## true mean for exp is 35956 (Bang & Tsiatis, 2000)
unif_light <- lapply(1:nSim, function(x) simCostData(dist = "unif", censor = "light", L=nYears))
unif_heavy <- lapply(1:nSim, function(x) simCostData(dist = "unif", censor = "heavy", L=nYears))
exp_light <- lapply(1:nSim, function(x) simCostData(dist = "exp", censor = "light", L=nYears))
exp_heavy <- lapply(1:nSim, function(x) simCostData(dist = "exp", censor = "heavy", L=nYears))
IDM_none <- lapply(1:nSim, function(x) sim.patients(n = 100, censor = 0, cost = 100))
IDM_light <- lapply(1:nSim, function(x) sim.patients(n = 100, censor = 0.05, cost = 100))
IDM_heavy <- lapply(1:nSim, function(x) sim.patients(n = 100, censor = 0.1, cost = 100))
### Estimate from censored data
nCores <- 20
cl <- makeCluster(nCores)
clusterExport(cl = cl, c("unif_light", "unif_heavy", "exp_light", "exp_heavy", "IDM_none", "IDM_light", "IDM_heavy"))
clusterEvalQ(cl = cl, {
library(dplyr)
library(ccostr)
library(survival)})
est_unif_light <- parLapply(cl, unif_light, function(x) ccmean(x$censoredCostHistory))
est_unif_heavy <- parLapply(cl, unif_heavy, function(x) ccmean(x$censoredCostHistory))
est_exp_light  <- parLapply(cl, exp_light, function(x) ccmean(x$censoredCostHistory))
est_exp_heavy  <- parLapply(cl, exp_heavy, function(x) ccmean(x$censoredCostHistory))
est_IDM_none   <- parLapply(cl, IDM_none, function(x) ccmean(x$censoredCostHistory))
est_IDM_light  <- parLapply(cl, IDM_light, function(x) ccmean(x$censoredCostHistory))
est_IDM_heavy  <- parLapply(cl, IDM_heavy, function(x) ccmean(x$censoredCostHistory))
stopCluster(cl)
## Summarize
results_unif_light <- do.call(rbind, lapply(est_unif_light, function(x) x[[2]]))
results_unif_heavy <- do.call(rbind, lapply(est_unif_heavy, function(x) x[[2]]))
results_exp_light  <- do.call(rbind, lapply(est_exp_light, function(x) x[[2]]))
results_exp_heavy  <- do.call(rbind, lapply(est_exp_heavy, function(x) x[[2]]))
results_IDM_none   <- do.call(rbind, lapply(est_IDM_none, function(x) x[[2]]))
results_IDM_light  <- do.call(rbind, lapply(est_IDM_light, function(x) x[[2]]))
results_IDM_heavy  <- do.call(rbind, lapply(est_IDM_heavy, function(x) x[[2]]))
results_true <- data.frame("unif_light" = 40000,
"unif_heavy" = 40000,
"exp_light"  = 35956,
"exp_heavy"  = 35956,
"IDM_none"   = exact.cost(0.2, 0.5, 0.1, 100)$value,
"IDM_light"  = exact.cost(0.2, 0.5, 0.1, 100)$value,
"IDM_heavy"  = exact.cost(0.2, 0.5, 0.1, 100)$value)
results_mean <- data.frame("unif_light" = mean(sapply(unif_light, function(x) mean(x$totalCost))),
"unif_heavy" = mean(sapply(unif_heavy, function(x) mean(x$totalCost))),
"exp_light"  = mean(sapply(exp_light, function(x) mean(x$totalCost))),
"exp_heavy"  = mean(sapply(exp_heavy, function(x) mean(x$totalCost))),
"IDM_none"   = NA,
"IDM_light"  = NA,
"IDM_heavy"  = NA)
results_bias <- data.frame("unif_light" = (colMeans(results_unif_light)),
"unif_heavy" = (colMeans(results_unif_heavy)),
"exp_light"  = (colMeans(results_exp_light)),
"exp_heavy"  = (colMeans(results_exp_heavy)),
"IDM_none"   = (colMeans(results_IDM_none)),
"IDM_light"  = (colMeans(results_IDM_light)),
"IDM_heavy"  = (colMeans(results_IDM_heavy)))
results <- rbind(results_true, results_mean, results_bias)
row.names(results) <- c("true_mean", "simulation_mean", colnames(results_unif_light))
results
nSim   <- 1
nYears <- 10
## true mean for unif is 40000 and
## true mean for exp is 35956 (Bang & Tsiatis, 2000)
unif_light <- lapply(1:nSim, function(x) simCostData(dist = "unif", censor = "light", L=nYears))
unif_heavy <- lapply(1:nSim, function(x) simCostData(dist = "unif", censor = "heavy", L=nYears))
exp_light <- lapply(1:nSim, function(x) simCostData(dist = "exp", censor = "light", L=nYears))
exp_heavy <- lapply(1:nSim, function(x) simCostData(dist = "exp", censor = "heavy", L=nYears))
IDM_none <- lapply(1:nSim, function(x) sim.patients(n = 100, censor = 0, cost = 100))
IDM_light <- lapply(1:nSim, function(x) sim.patients(n = 100, censor = 0.05, cost = 100))
IDM_heavy <- lapply(1:nSim, function(x) sim.patients(n = 100, censor = 0.1, cost = 100))
### Estimate from censored data
nCores <- 20
cl <- makeCluster(nCores)
clusterExport(cl = cl, c("unif_light", "unif_heavy", "exp_light", "exp_heavy", "IDM_none", "IDM_light", "IDM_heavy"))
clusterEvalQ(cl = cl, {
library(dplyr)
library(ccostr)
library(survival)})
est_unif_light <- parLapply(cl, unif_light, function(x) ccmean(x$censoredCostHistory))
est_unif_heavy <- parLapply(cl, unif_heavy, function(x) ccmean(x$censoredCostHistory))
est_exp_light  <- parLapply(cl, exp_light, function(x) ccmean(x$censoredCostHistory))
est_exp_heavy  <- parLapply(cl, exp_heavy, function(x) ccmean(x$censoredCostHistory))
est_IDM_none   <- parLapply(cl, IDM_none, function(x) ccmean(x$censoredCostHistory))
est_IDM_light  <- parLapply(cl, IDM_light, function(x) ccmean(x$censoredCostHistory))
est_IDM_heavy  <- parLapply(cl, IDM_heavy, function(x) ccmean(x$censoredCostHistory))
stopCluster(cl)
## Summarize
results_unif_light <- do.call(rbind, lapply(est_unif_light, function(x) x[[2]]))
results_unif_heavy <- do.call(rbind, lapply(est_unif_heavy, function(x) x[[2]]))
results_exp_light  <- do.call(rbind, lapply(est_exp_light, function(x) x[[2]]))
results_exp_heavy  <- do.call(rbind, lapply(est_exp_heavy, function(x) x[[2]]))
results_IDM_none   <- do.call(rbind, lapply(est_IDM_none, function(x) x[[2]]))
results_IDM_light  <- do.call(rbind, lapply(est_IDM_light, function(x) x[[2]]))
results_IDM_heavy  <- do.call(rbind, lapply(est_IDM_heavy, function(x) x[[2]]))
results_true <- data.frame("unif_light" = 40000,
"unif_heavy" = 40000,
"exp_light"  = 35956,
"exp_heavy"  = 35956,
"IDM_none"   = exact.cost(0.2, 0.5, 0.1, 100)$value,
"IDM_light"  = exact.cost(0.2, 0.5, 0.1, 100)$value,
"IDM_heavy"  = exact.cost(0.2, 0.5, 0.1, 100)$value)
results_mean <- data.frame("unif_light" = mean(sapply(unif_light, function(x) mean(x$totalCost))),
"unif_heavy" = mean(sapply(unif_heavy, function(x) mean(x$totalCost))),
"exp_light"  = mean(sapply(exp_light, function(x) mean(x$totalCost))),
"exp_heavy"  = mean(sapply(exp_heavy, function(x) mean(x$totalCost))),
"IDM_none"   = NA,
"IDM_light"  = NA,
"IDM_heavy"  = NA)
results_bias <- data.frame("unif_light" = (colMeans(results_unif_light)),
"unif_heavy" = (colMeans(results_unif_heavy)),
"exp_light"  = (colMeans(results_exp_light)),
"exp_heavy"  = (colMeans(results_exp_heavy)),
"IDM_none"   = (colMeans(results_IDM_none)),
"IDM_light"  = (colMeans(results_IDM_light)),
"IDM_heavy"  = (colMeans(results_IDM_heavy)))
results <- rbind(results_true, results_mean, results_bias)
row.names(results) <- c("true_mean", "simulation_mean", colnames(results_unif_light))
results
View(est_exp_heavy)
View(est_exp_heavy[[1]][[2]])
View(results_exp_heavy)
View(est_exp_heavy)
est_exp_heavy
est_exp_heavy[[1]]
est_exp_heavy[[1]][[1]]
est_exp_heavy[[1]][[2]]
View(unif_heavy)
unif_heavy[[1]][["censoredCostHistory"]]
unif_heavy[[1]][["censoredCostHistory"]]
setwd("C:/Users/upc6/Desktop/ONESIM")
write.csv(unif_heavy[[1]][["censoredCostHistory"]],  file = "unif_heavy.csv")
write.csv(unif_heavy[[1]][["censoredCostHistory"]],  file = "unif_heavy.csv")
write.csv(unif_light[[1]][["censoredCostHistory"]],  file = "unif_light.csv")
write.csv(exp_heavy[[1]][["censoredCostHistory"]],  file = "exp_heavy.csv")
write.csv(exp_light[[1]][["censoredCostHistory"]],  file = "exp_light.csv")
write.csv(IDM_none[[1]][["censoredCostHistory"]],  file = "IDM_none.csv")
write.csv(IDM_light[[1]][["censoredCostHistory"]],  file = "IDM_light.csv")
write.csv(IDM_heavy[[1]][["censoredCostHistory"]],  file = "IDM_heavy.csv")
write.csv(unif_heavy[[1]][["censoredCostHistory"]],  file = "unif_heavy.csv")
write.csv(unif_light[[1]][["censoredCostHistory"]],  file = "unif_light.csv")
write.csv(exp_heavy[[1]][["censoredCostHistory"]],  file = "exp_heavy.csv")
write.csv(exp_light[[1]][["censoredCostHistory"]],  file = "exp_light.csv")
write.csv(IDM_none[[1]][["censoredCostHistory"]],  file = "IDM_none.csv")
write.csv(IDM_light[[1]][["censoredCostHistory"]],  file = "IDM_light.csv")
write.csv(IDM_heavy[[1]][["censoredCostHistory"]],  file = "IDM_heavy.csv")
write.csv(unif_heavy[[1]][["censoredCostHistory"]],  file = "unif_heavy.csv")
write.csv(unif_light[[1]][["censoredCostHistory"]],  file = "unif_light.csv")
write.csv(exp_heavy[[1]][["censoredCostHistory"]],  file = "exp_heavy.csv")
write.csv(exp_light[[1]][["censoredCostHistory"]],  file = "exp_light.csv")
write.csv(IDM_none[[1]][["censoredCostHistory"]],  file = "IDM_none.csv")
write.csv(IDM_light[[1]][["censoredCostHistory"]],  file = "IDM_light.csv")
write.csv(IDM_heavy[[1]][["censoredCostHistory"]],  file = "IDM_heavy.csv")
write.dta(unif_heavy[[1]][["censoredCostHistory"]],  file = "unif_heavy.csv")
library(foreign)
write.dta(unif_heavy[[1]][["censoredCostHistory"]],  file = "unif_heavy.dta")
write.dta(unif_heavy[[1]][["censoredCostHistory"]],  file = "unif_heavy.dta")
write.dta(unif_light[[1]][["censoredCostHistory"]],  file = "unif_light.dta")
write.dta(exp_heavy[[1]][["censoredCostHistory"]],  file = "exp_heavy.dta")
write.dta(exp_light[[1]][["censoredCostHistory"]],  file = "exp_light.dta")
write.dta(IDM_none[[1]][["censoredCostHistory"]],  file = "IDM_none.dta")
write.dta(IDM_light[[1]][["censoredCostHistory"]],  file = "IDM_light.dta")
write.dta(IDM_heavy[[1]][["censoredCostHistory"]],  file = "IDM_heavy.dta")
a <- unif_light[[1]][["censoredCostHistory"]]
a
View(a)
b <- IDM_light[[1]][["censoredCostHistory"]]
View(b)
c <- exp_light[[1]][["censoredCostHistory"]]
View(c)
d <- IDM_heavy[[1]][["censoredCostHistory"]]
View(d)
setwd("~/GitHub/ccostr")
library(devtools)
document()
devtools::use_vignette("my-vignette")
devtools::install_github("HaemAalborg/ccostr")
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
library(ccostr)
nSim   <- 10
nYears <- 10
## true mean for unif is 40000 and
## true mean for exp is 35956 (Bang & Tsiatis, 2000)
unif_light <- lapply(1:nSim, function(x) simCostData(dist = "unif", censor = "light", L=nYears))
devtools::install_github("HaemAalborg/ccostr")
library(ccostr)
library(ccostr)
nSim   <- 1
nYears <- 10
## true mean for unif is 40000 and
## true mean for exp is 35956 (Bang & Tsiatis, 2000)
unif_light <- lapply(1:nSim, function(x) simCostData(dist = "unif", censor = "light", L=nYears))
unif_heavy <- lapply(1:nSim, function(x) simCostData(dist = "unif", censor = "heavy", L=nYears))
exp_light <- lapply(1:nSim, function(x) simCostData(dist = "exp", censor = "light", L=nYears))
exp_heavy <- lapply(1:nSim, function(x) simCostData(dist = "exp", censor = "heavy", L=nYears))
IDM_none <- lapply(1:nSim, function(x) sim.patients(n = 100, censor = 0, cost = 100))
IDM_light <- lapply(1:nSim, function(x) sim.patients(n = 100, censor = 0.05, cost = 100))
IDM_heavy <- lapply(1:nSim, function(x) sim.patients(n = 100, censor = 0.1, cost = 100))
### Estimate from censored data
nCores <- 1
cl <- makeCluster(nCores)
clusterExport(cl = cl, c("unif_light", "unif_heavy", "exp_light", "exp_heavy", "IDM_none", "IDM_light", "IDM_heavy"))
clusterEvalQ(cl = cl, {
library(dplyr)
library(ccostr)
library(survival)})
est_unif_light <- parLapply(cl, unif_light, function(x) ccmean(x$censoredCostHistory))
est_unif_heavy <- parLapply(cl, unif_heavy, function(x) ccmean(x$censoredCostHistory))
est_exp_light  <- parLapply(cl, exp_light, function(x) ccmean(x$censoredCostHistory))
est_exp_heavy  <- parLapply(cl, exp_heavy, function(x) ccmean(x$censoredCostHistory))
est_IDM_none   <- parLapply(cl, IDM_none, function(x) ccmean(x$censoredCostHistory))
est_IDM_light  <- parLapply(cl, IDM_light, function(x) ccmean(x$censoredCostHistory))
est_IDM_heavy  <- parLapply(cl, IDM_heavy, function(x) ccmean(x$censoredCostHistory))
stopCluster(cl)
## Summarize
results_unif_light <- do.call(rbind, lapply(est_unif_light, function(x) x[[2]]))
results_unif_heavy <- do.call(rbind, lapply(est_unif_heavy, function(x) x[[2]]))
results_exp_light  <- do.call(rbind, lapply(est_exp_light, function(x) x[[2]]))
results_exp_heavy  <- do.call(rbind, lapply(est_exp_heavy, function(x) x[[2]]))
results_IDM_none   <- do.call(rbind, lapply(est_IDM_none, function(x) x[[2]]))
results_IDM_light  <- do.call(rbind, lapply(est_IDM_light, function(x) x[[2]]))
results_IDM_heavy  <- do.call(rbind, lapply(est_IDM_heavy, function(x) x[[2]]))
results_true <- data.frame("unif_light" = 40000,
"unif_heavy" = 40000,
"exp_light"  = 35956,
"exp_heavy"  = 35956,
"IDM_none"   = exact.cost(0.2, 0.5, 0.1, 100)$value,
"IDM_light"  = exact.cost(0.2, 0.5, 0.1, 100)$value,
"IDM_heavy"  = exact.cost(0.2, 0.5, 0.1, 100)$value)
results_mean <- data.frame("unif_light" = mean(sapply(unif_light, function(x) mean(x$totalCost))),
"unif_heavy" = mean(sapply(unif_heavy, function(x) mean(x$totalCost))),
"exp_light"  = mean(sapply(exp_light, function(x) mean(x$totalCost))),
"exp_heavy"  = mean(sapply(exp_heavy, function(x) mean(x$totalCost))),
"IDM_none"   = NA,
"IDM_light"  = NA,
"IDM_heavy"  = NA)
results_bias <- data.frame("unif_light" = (colMeans(results_unif_light)),
"unif_heavy" = (colMeans(results_unif_heavy)),
"exp_light"  = (colMeans(results_exp_light)),
"exp_heavy"  = (colMeans(results_exp_heavy)),
"IDM_none"   = (colMeans(results_IDM_none)),
"IDM_light"  = (colMeans(results_IDM_light)),
"IDM_heavy"  = (colMeans(results_IDM_heavy)))
results <- rbind(results_true, results_mean, results_bias)
row.names(results) <- c("true_mean", "simulation_mean", colnames(results_unif_light))
results
library(ccostr)
library(parallel)
library(msm)
nSim   <- 1
nYears <- 10
## true mean for unif is 40000 and
## true mean for exp is 35956 (Bang & Tsiatis, 2000)
unif_light <- lapply(1:nSim, function(x) simCostData(dist = "unif", censor = "light", L=nYears))
unif_heavy <- lapply(1:nSim, function(x) simCostData(dist = "unif", censor = "heavy", L=nYears))
exp_light <- lapply(1:nSim, function(x) simCostData(dist = "exp", censor = "light", L=nYears))
exp_heavy <- lapply(1:nSim, function(x) simCostData(dist = "exp", censor = "heavy", L=nYears))
IDM_none <- lapply(1:nSim, function(x) sim.patients(n = 100, censor = 0, cost = 100))
IDM_light <- lapply(1:nSim, function(x) sim.patients(n = 100, censor = 0.05, cost = 100))
IDM_heavy <- lapply(1:nSim, function(x) sim.patients(n = 100, censor = 0.1, cost = 100))
### Estimate from censored data
nCores <- 1
cl <- makeCluster(nCores)
clusterExport(cl = cl, c("unif_light", "unif_heavy", "exp_light", "exp_heavy", "IDM_none", "IDM_light", "IDM_heavy"))
clusterEvalQ(cl = cl, {
library(dplyr)
library(ccostr)
library(survival)})
est_unif_light <- parLapply(cl, unif_light, function(x) ccmean(x$censoredCostHistory))
est_unif_heavy <- parLapply(cl, unif_heavy, function(x) ccmean(x$censoredCostHistory))
est_exp_light  <- parLapply(cl, exp_light, function(x) ccmean(x$censoredCostHistory))
est_exp_heavy  <- parLapply(cl, exp_heavy, function(x) ccmean(x$censoredCostHistory))
est_IDM_none   <- parLapply(cl, IDM_none, function(x) ccmean(x$censoredCostHistory))
est_IDM_light  <- parLapply(cl, IDM_light, function(x) ccmean(x$censoredCostHistory))
est_IDM_heavy  <- parLapply(cl, IDM_heavy, function(x) ccmean(x$censoredCostHistory))
stopCluster(cl)
## Summarize
results_unif_light <- do.call(rbind, lapply(est_unif_light, function(x) x[[2]]))
results_unif_heavy <- do.call(rbind, lapply(est_unif_heavy, function(x) x[[2]]))
results_exp_light  <- do.call(rbind, lapply(est_exp_light, function(x) x[[2]]))
results_exp_heavy  <- do.call(rbind, lapply(est_exp_heavy, function(x) x[[2]]))
results_IDM_none   <- do.call(rbind, lapply(est_IDM_none, function(x) x[[2]]))
results_IDM_light  <- do.call(rbind, lapply(est_IDM_light, function(x) x[[2]]))
results_IDM_heavy  <- do.call(rbind, lapply(est_IDM_heavy, function(x) x[[2]]))
results_true <- data.frame("unif_light" = 40000,
"unif_heavy" = 40000,
"exp_light"  = 35956,
"exp_heavy"  = 35956,
"IDM_none"   = exact.cost(0.2, 0.5, 0.1, 100)$value,
"IDM_light"  = exact.cost(0.2, 0.5, 0.1, 100)$value,
"IDM_heavy"  = exact.cost(0.2, 0.5, 0.1, 100)$value)
results_mean <- data.frame("unif_light" = mean(sapply(unif_light, function(x) mean(x$totalCost))),
"unif_heavy" = mean(sapply(unif_heavy, function(x) mean(x$totalCost))),
"exp_light"  = mean(sapply(exp_light, function(x) mean(x$totalCost))),
"exp_heavy"  = mean(sapply(exp_heavy, function(x) mean(x$totalCost))),
"IDM_none"   = NA,
"IDM_light"  = NA,
"IDM_heavy"  = NA)
results_bias <- data.frame("unif_light" = (colMeans(results_unif_light)),
"unif_heavy" = (colMeans(results_unif_heavy)),
"exp_light"  = (colMeans(results_exp_light)),
"exp_heavy"  = (colMeans(results_exp_heavy)),
"IDM_none"   = (colMeans(results_IDM_none)),
"IDM_light"  = (colMeans(results_IDM_light)),
"IDM_heavy"  = (colMeans(results_IDM_heavy)))
results <- rbind(results_true, results_mean, results_bias)
row.names(results) <- c("true_mean", "simulation_mean", colnames(results_unif_light))
results
library(ccostr)
library("ccostr", lib.loc="~/R/win-library/3.4")
detach("package:ccostr", unload=TRUE)
devtools::install_github("HaemAalborg/ccostr")
library(ccostr)
devtools:check()
library(devtools)
devtools:check()
document()
document()
devtools::install_github("HaemAalborg/ccostr", build_vignettes = TRUE)
a <- sim.patients(10, 0.04, 1000)
aaaaa <- sim.patients(10, 0.04, 1000)
View(aaaaa)
aaaaa[["censoredCostHistory"]]
View(aaaaa[["censoredCostHistory"]])
aaaaa <- sim.patients(100, 0.1, 1000)
View(aaaaa)
aaaaa[["censoredCostHistory"]]
View(aaaaa[["censoredCostHistory"]])
sim.patients <- function(n, censor=0.05, cost){
lam12 <-  0.2
lam21 <-  0.5
lam13 <-  0.1
lam14 <- censor
lam23 <-  0.1
lam24 <- censor
qmatrix <- rbind(
c(   -1,    lam12,   lam13,  lam14),
c(lam21,       -1,   lam23,  lam24),
c(    0,        0,      -1,      0),
c(    0,        0,       0,     -1))
# Simulate n patients with transition rate matrix qmatrix and exponential
# cost/time-unit distribtion
xxx <- data.frame(id = character(), times = numeric(), state = numeric(), cost = numeric())
for(i in 1:n){
tmp <- sim.msm(qmatrix, maxtime = Inf)
tmp <- data.frame(i, tmp$times, tmp$states, 0)
names(tmp) <- c("id", "times", "state", "cost")
for(j in 1:nrow(tmp))
if(tmp$state[j] == 2) tmp$cost[j] <- rexp(1,rate = 1/cost)
xxx <- rbind(xxx,tmp)
}
xxx$surv <- ifelse(xxx$state > 2, xxx$times, 0)
xxx$delta <- ifelse(xxx$state == 3, 1, 0)
xxx$start <- xxx$times
xxx$stop <- NA
xxx$stop <- ifelse(xxx$id == xxx$id[-1], xxx$times[-1],0)
sim <- xxx %>%
group_by(id) %>%
mutate(delta = max(delta),
surv = max(surv),
cost2 = ifelse(max(cost) == 0, NA, max(cost)))
#sim <- subset(sim, sim$cost != 0 | (is.na(sim$cost2) & state == 1))
# Calculate the cost per patient
cost <- 0
n.ids <- length(unique(sim$id))
simcost <- rep(0,n.ids)
for(i in 1:n.ids){
tmp <- sim[sim$id == i,]
simcost[i] <- sum(diff(tmp$times)*head(tmp$cost, -1))
}
return(list("totalCost" = simcost, "censoredCostHistory" = sim))
}
sim.patients(100, 0.1, 1000)
aa <- sim.patients(100, 0.1, 1000)
View(aa)
View(aa[["censoredCostHistory"]])
simCostData(n = 100, dist = "unif", censor = "light", L=10)
bbb <- simCostData(n = 100, dist = "unif", censor = "light", L=10)
View(bbb)
View(bbb[["censoredCostHistory"]])
devtools::install_github("HaemAalborg/ccostr")
devtools::install_github("HaemAalborg/ccostr", force=T)
