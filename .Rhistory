est$First[,3]
est$Estimates$ZT[2]
est$Estimates$ZT[3]
est$Survival
est$Survival[5]
est$Survival[,5]
est$Survival[5,]
est$Survival$matrix[5]
est$Survival$matrix[,5]
est$Survival$matrix[5,]
est$Survival$matrix[5]
est$Survival$matrix[[5]]
test_that("survival estimates hcost", {
expect_equal(round(est$Survival$matrix[[5]],2), 1164.88)
expect_equal(round(est$Survival$matrix[[5]]), 1165)
})
test_that("survival estimates hcost", {
#expect_equal(round(est$Survival$matrix[[5]],2), 1164.88)
expect_equal(round(est$Survival$matrix[[5]]), 1165)
})
test_that("survival estimates hcost", {
#expect_equal(round(est$Survival$matrix[[5]],2), 1164.88)
expect_equal(round(est$Survival$matrix[[5]]), 1165)
})
est$Survival$matrix[[5]]
test_that("survival estimates hcost", {
expect_equal(round(est$Survival$matrix[[5]]), round(1164.88))
})
est$Survival
est$Survival[[5]]
est$Survival[[1]]
est$Survival[[1]][[5]]
expect_equal(round(est$Survival[[1]][[5]]), round(1164.88))
round(est$Survival[[1]][[5]])
round(1164.88)
test_that("survival estimates hcost", {
expect_equal(as.numeric(round(est$Survival[[1]][[5]])), as.numeric(round(1164.88)))
})
est2 <- ccmean(hcost, L = 2000, addInterPol = 1)
test_that("mean estimates hcost", {
expect_equal(round(est2$First[,3],2), 83953.99 )
expect_equal(round(est2$First[,4],2), 92439.34)
})
test_that("variance estimates hcost", {
expect_equal(round(est2$Estimates$BT[3],2), 15734.94)
expect_equal(round(est2$Estimates$ZT[3],2), 16073.06)
})
test_that("survival estimates hcost", {
expect_equal(as.numeric(round(est1$Survival[[1]][[5]])), as.numeric(round(1445.72)))
})
test_that("survival estimates hcost", {
expect_equal(as.numeric(round(est2$Survival[[1]][[5]])), as.numeric(round(1445.72)))
})
est2$Survival[[1]][[5]]
est2 <- ccmean(hcost, L = 2082, addInterPol = 1)
test_that("mean estimates hcost", {
expect_equal(round(est2$First[,3],2), 83953.99 )
expect_equal(round(est2$First[,4],2), 92439.34)
})
test_that("variance estimates hcost", {
expect_equal(round(est2$Estimates$BT[3],2), 15734.94)
expect_equal(round(est2$Estimates$ZT[3],2), 16073.06)
})
est3 <- ccmean(hcost, L = 2082, addInterPol = 1)
test_that("mean estimates hcost", {
expect_equal(round(est2$First[,3],2), 83953.99)
expect_equal(round(est2$First[,4],2), 92439.34)
})
test_that("variance estimates hcost", {
expect_equal(round(est2$Estimates$BT[3],2), 15734.94)
expect_equal(round(est2$Estimates$ZT[3],2), 16073.06)
})
est3 <- ccmean(hcost, L = 2082, addInterPol = 1)
test_that("mean estimates hcost", {
expect_equal(round(est3$First[,3],2), 83953.99)
expect_equal(round(est3$First[,4],2), 92439.34)
})
test_that("variance estimates hcost", {
expect_equal(round(est3$Estimates$BT[3],2), 15734.94)
expect_equal(round(est3$Estimates$ZT[3],2), 16073.06)
})
devtools::install_github("HaemAalborg/ccostr")
ule <- simCostData(n = 1000, dist = "unif", censor = "light", cdist = "exp")
uhe <- simCostData(n = 1000, dist = "unif", censor = "heavy", cdist = "exp")
ele <- simCostData(n = 1000, dist = "exp",  censor = "light", cdist = "exp")
ehe <- simCostData(n = 1000, dist = "exp",  censor = "heavy", cdist = "exp")
ulu <- simCostData(n = 1000, dist = "unif", censor = "light", cdist = "unif")
uhu <- simCostData(n = 1000, dist = "unif", censor = "heavy", cdist = "unif")
elu <- simCostData(n = 1000, dist = "exp",  censor = "light", cdist = "unif")
ehu <- simCostData(n = 1000, dist = "exp",  censor = "heavy", cdist = "unif")
save(ule, uhe, ele, ehe, ulu, uhu, elu, ehu, file = "simTest.Rdata")
ule <- simCostData(n = 1000, dist = "unif", censor = "light", cdist = "exp")
library(ccostr)
library(ccostr)
ule <- simCostData(n = 1000, dist = "unif", censor = "light", cdist = "exp")
set.seed(20)
ule <- simCostData(n = 1000, dist = "unif", censor = "light", cdist = "exp")
uhe <- simCostData(n = 1000, dist = "unif", censor = "heavy", cdist = "exp")
ele <- simCostData(n = 1000, dist = "exp",  censor = "light", cdist = "exp")
ehe <- simCostData(n = 1000, dist = "exp",  censor = "heavy", cdist = "exp")
ulu <- simCostData(n = 1000, dist = "unif", censor = "light", cdist = "unif")
uhu <- simCostData(n = 1000, dist = "unif", censor = "heavy", cdist = "unif")
elu <- simCostData(n = 1000, dist = "exp",  censor = "light", cdist = "unif")
ehu <- simCostData(n = 1000, dist = "exp",  censor = "heavy", cdist = "unif")
save(ule, uhe, ele, ehe, ulu, uhu, elu, ehu, file = "simTest.Rdata")
library(foreign)
write.dta(ule, "c:/ule.dta")
ule <- simCostData(n = 1000, dist = "unif", censor = "light", cdist = "exp")$simCostHistory
simCostData(n = 1000, dist = "unif", censor = "light", cdist = "exp")$simCostHistory
ule <- simCostData(n = 1000, dist = "unif", censor = "light", cdist = "exp")$censoredCostHistory
uhe <- simCostData(n = 1000, dist = "unif", censor = "heavy", cdist = "exp")$censoredCostHistory
ele <- simCostData(n = 1000, dist = "exp",  censor = "light", cdist = "exp")$censoredCostHistory
ehe <- simCostData(n = 1000, dist = "exp",  censor = "heavy", cdist = "exp")$censoredCostHistory
ulu <- simCostData(n = 1000, dist = "unif", censor = "light", cdist = "unif")$censoredCostHistory
uhu <- simCostData(n = 1000, dist = "unif", censor = "heavy", cdist = "unif")$censoredCostHistory
elu <- simCostData(n = 1000, dist = "exp",  censor = "light", cdist = "unif")$censoredCostHistory
ehu <- simCostData(n = 1000, dist = "exp",  censor = "heavy", cdist = "unif")$censoredCostHistory
write.dta(ule, "c:/ule.dta")
write.dta(ule)
write.dta(ule, file = "ule.dta")
ccmean(ule, L=9)
max(ule$surv)
ccmean(ule, L=9, addInterPol = 1)
write.dta(ulu, file = "ulu.dta")
ccmean(ulu, L=9, addInterPol = 1)
ccmean(ulu, L=10, addInterPol = 1)
ccmean(ulu, L=9.978836, addInterPol = 1)
ccmean(ulu, addInterPol = 1)
ccmean(ulu, addInterPol = 1, L=8)
set.seed(03072019)
set.seed(03072019)
ule <- simCostData(n = 1000, dist = "unif", censor = "light", cdist = "exp")$censoredCostHistory
uhe <- simCostData(n = 1000, dist = "unif", censor = "heavy", cdist = "exp")$censoredCostHistory
ele <- simCostData(n = 1000, dist = "exp",  censor = "light", cdist = "exp")$censoredCostHistory
ehe <- simCostData(n = 1000, dist = "exp",  censor = "heavy", cdist = "exp")$censoredCostHistory
ulu <- simCostData(n = 1000, dist = "unif", censor = "light", cdist = "unif")$censoredCostHistory
uhu <- simCostData(n = 1000, dist = "unif", censor = "heavy", cdist = "unif")$censoredCostHistory
elu <- simCostData(n = 1000, dist = "exp",  censor = "light", cdist = "unif")$censoredCostHistory
ehu <- simCostData(n = 1000, dist = "exp",  censor = "heavy", cdist = "unif")$censoredCostHistory
library(foreign)
write.dta(ule, file = "ule.dta")
write.dta(uhe, file = "uhe.dta")
write.dta(ele, file = "ele.dta")
write.dta(ehe, file = "ehe.dta")
write.dta(ulu, file = "ulu.dta")
write.dta(uhu, file = "uhu.dta")
write.dta(elu, file = "elu.dta")
write.dta(ehu, file = "ehu.dta")
max(ule$surv)
max(uhe$surv)
max(ele$surv)
max(ehe$surv)
max(ulu$surv)
max(uhu$surv)
max(elu$surv)
max(ehu$surv)
save(ule, uhe, ele, ehe, ulu, uhu, elu, ehu, file="StataDataTest.Rdata")
usethis::use_test("sim_similarity")
load(file = "\tests\testthat\StataDataTest.Rdata")
load(file = "/tests/testthat/StataDataTest.Rdata")
wd
getwd()
load(file = "tests/testthat/StataDataTest.Rdata")
load(file = "tests/testthat/StataDataTest.Rdata")
est.ule <- ccmean(ule, L=9.969014, addInterPol = 1)
est.ule$First[,3]
test_that("mean estimates sim ule", {
expect_equal(est.ule$First[,3], 40636.63)
expect_equal(est.ule$First[,4], 40273.73)
})
test_that("mean estimates sim ule", {
expect_equal(round(est.ule$First[,3],2), 40636.63)
expect_equal(round(est.ule$First[,4],2), 40273.73)
})
test_that("variance estimates sim ule", {
expect_equal(round(est.ule$Estimates$BT[3],2), 339.53)
expect_equal(round(est.ule$Estimates$ZT[3],2), 347.72)
})
est.ule1 <- ccmean(ule, L = 9.969014, addInterPol = 1)
est.ule2 <- ccmean(ule, L = 6,        addInterPol = 1)
test_that("mean estimates sim ule1", {
expect_equal(round(est.ule1$First[,3],2), 40636.63)
expect_equal(round(est.ule1$First[,4],2), 40273.73)
})
test_that("variance estimates sim ule1", {
expect_equal(round(est.ule1$Estimates$BT[3],2), 339.53)
expect_equal(round(est.ule1$Estimates$ZT[3],2), 347.72)
})
test_that("mean estimates sim ule2", {
expect_equal(round(est.ule2$First[,3],2), 32352.96)
expect_equal(round(est.ule2$First[,4],2), 32104.05)
})
test_that("variance estimates sim ule2", {
expect_equal(round(est.ule2$Estimates$BT[3],2), 328.16)
expect_equal(round(est.ule2$Estimates$ZT[3],2), 323.97)
})
set.wd("C:\Users\larsn\Documents\GitHub\ccostr")
setwd("C:\Users\larsn\Documents\GitHub\ccostr")
setwd("C:/Users/larsn/Documents/GitHub/ccostr")
setwd("C:/Users/larsn/Documents/GitHub/ccostr")
load(file = "tests/testthat/StataDataTest.Rdata")
# Comparison values are hardcoded from runs in Stata with the Hcost package
est.ule1 <- ccmean(ule, L = 9.969014, addInterPol = 1)
est.ule2 <- ccmean(ule, L = 6,        addInterPol = 1)
test_that("mean estimates sim ule1", {
expect_equal(round(est.ule1$First[,3],2), 40636.63)
expect_equal(round(est.ule1$First[,4],2), 40273.73)
})
est.uhe1 <- ccmean(uhe, L = 9.994942, addInterPol = 1)
est.uhe2 <- ccmean(uhe, L = 6,        addInterPol = 1)
test_that("mean estimates sim uhe1", {
expect_equal(round(est.uhe1$First[,3],2), 40324.72)
expect_equal(round(est.uhe1$First[,4],2), 39677.79)
})
test_that("variance estimates sim uhe1", {
expect_equal(round(est.uhe1$Estimates$BT[3],2), 372.16)
expect_equal(round(est.uhe1$Estimates$ZT[3],2), 385.25)
})
test_that("mean estimates sim uhe2", {
expect_equal(round(est.uhe2$First[,3],2), 32321.45)
expect_equal(round(est.uhe2$First[,4],2), 31908.71)
})
test_that("variance estimates sim uhe2", {
expect_equal(round(est.uhe2$Estimates$BT[3],2), 386.86)
expect_equal(round(est.uhe2$Estimates$ZT[3],2), 374.06)
})
est.ule1 <- ccmean(ule, L = 9.969014, addInterPol = 1)
est.ule2 <- ccmean(ule, L = 6,        addInterPol = 1)
test_that("mean estimates sim ule1", {
expect_equal(round(est.ule1$First[,3],2), 40636.63)
expect_equal(round(est.ule1$First[,4],2), 40273.73)
})
test_that("variance estimates sim ule1", {
expect_equal(round(est.ule1$Estimates$BT[3],2), 339.53)
expect_equal(round(est.ule1$Estimates$ZT[3],2), 347.72)
})
test_that("mean estimates sim ule2", {
expect_equal(round(est.ule2$First[,3],2), 32352.96)
expect_equal(round(est.ule2$First[,4],2), 32104.05)
})
test_that("variance estimates sim ule2", {
expect_equal(round(est.ule2$Estimates$BT[3],2), 328.16)
expect_equal(round(est.ule2$Estimates$ZT[3],2), 323.97)
})
est.ele1 <- ccmean(ele, L = 24.53706, addInterPol = 1)
est.ele2 <- ccmean(ele, L = 6,        addInterPol = 1)
test_that("mean estimates sim ele1", {
expect_equal(round(est.ele1$First[,3],2), 42634.47)
expect_equal(round(est.ele1$First[,4],2), 41804.40)
})
test_that("variance estimates sim ele1", {
expect_equal(round(est.ele1$Estimates$BT[3],2), 539.11)
expect_equal(round(est.ele1$Estimates$ZT[3],2), 562.56)
})
View(ehe)
View(ehu)
test_that("mean estimates sim ele1", {
expect_equal(round(est.ele1$First[,3],2), 42634.47)
expect_equal(round(est.ele1$First[,4],2), 41804.40)
})
test_that("variance estimates sim ele1", {
expect_equal(round(est.ele1$Estimates$BT[3],2), 539.11)
expect_equal(round(est.ele1$Estimates$ZT[3],2), 562.56)
})
test_that("mean estimates sim ele2", {
expect_equal(round(est.ele2$First[,3],2), 31701.84)
expect_equal(round(est.ele2$First[,4],2), 31328.33)
})
test_that("variance estimates sim ele2", {
expect_equal(round(est.ele2$Estimates$BT[3],2), 322.31)
expect_equal(round(est.ele2$Estimates$ZT[3],2), 317.62)
})
# EHE ---------------------------------------------------------------------
est.ehe1 <- ccmean(ehe, L = 31.93079, addInterPol = 1)
est.ehe1
ccmean(ehe, L = 31.93078, addInterPol = 1)
est.ehe1 <- ccmean(ehe, L = 31.93078, addInterPol = 1)
est.ehe2 <- ccmean(ehe, L = 6,        addInterPol = 1)
test_that("mean estimates sim ehe1", {
expect_equal(round(est.ehe1$First[,3],2), 43080.53)
expect_equal(round(est.ehe1$First[,4],2), 42108.11)
})
test_that("variance estimates sim ehe1", {
expect_equal(round(est.ehe1$Estimates$BT[3],2), 909.52)
expect_equal(round(est.ehe1$Estimates$ZT[3],2), 933.75)
})
test_that("mean estimates sim ehe2", {
expect_equal(round(est.ehe2$First[,3],2), 31349.38)
expect_equal(round(est.ehe2$First[,4],2), 30948.75)
})
test_that("variance estimates sim ehe2", {
expect_equal(round(est.ehe2$Estimates$BT[3],2), 346.65)
expect_equal(round(est.ehe2$Estimates$ZT[3],2), 336.83)
})
est.ulu1 <- ccmean(ulu, L = 9.964636, addInterPol = 1)
est.ulu2 <- ccmean(ulu, L = 6,        addInterPol = 1)
test_that("mean estimates sim ulu1", {
expect_equal(round(est.ulu1$First[,3],2), 40095.93)
expect_equal(round(est.ulu1$First[,4],2), 39659.38)
})
test_that("variance estimates sim ulu1", {
expect_equal(round(est.ulu1$Estimates$BT[3],2), 313.90)
expect_equal(round(est.ulu1$Estimates$ZT[3],2), 325.33)
})
test_that("mean estimates sim ulu2", {
expect_equal(round(est.ulu2$First[,3],2), 32254.42)
expect_equal(round(est.ulu2$First[,4],2), 32063.21)
})
test_that("variance estimates sim ulu2", {
expect_equal(round(est.ulu2$Estimates$BT[3],2), 337.56)
expect_equal(round(est.ulu2$Estimates$ZT[3],2), 330.21)
})
est.ehu1 <- ccmean(ehu, L = 12.48327, addInterPol = 1)
est.ehu2 <- ccmean(ehu, L = 6,        addInterPol = 1)
test_that("mean estimates sim ehu1", {
expect_equal(round(est.ehu1$First[,3],2), 38797.84)
expect_equal(round(est.ehu1$First[,4],2), 36847.97)
})
test_that("variance estimates sim ehu1", {
expect_equal(round(est.ehu1$Estimates$BT[3],2), 360.05)
expect_equal(round(est.ehu1$Estimates$ZT[3],2), 771.78)
})
test_that("mean estimates sim ehu2", {
expect_equal(round(est.ehu2$First[,3],2), 31458.79)
expect_equal(round(est.ehu2$First[,4],2), 31120)
})
test_that("variance estimates sim ehu2", {
expect_equal(round(est.ehu2$Estimates$BT[3],2), 354.33)
expect_equal(round(est.ehu2$Estimates$ZT[3],2), 342.57)
})
est <- ccmean(elu, L = 10,  addInterPol = 1)
est
est <- ccmean(elu, L = 10)
est
est.elu1 <- ccmean(elu, L = 19.9812,  addInterPol = 1)
est.elu2 <- ccmean(elu, L = 6,        addInterPol = 0)
test_that("mean estimates sim elu1", {
expect_equal(round(est.elu1$First[,3],2), 39205.09)
expect_equal(round(est.elu1$First[,4],2), 39160.99)
})
test_that("variance estimates sim elu1", {
expect_equal(round(est.elu1$Estimates$BT[3],2), 482.39)
expect_equal(round(est.elu1$Estimates$ZT[3],2), 550.58)
})
test_that("mean estimates sim elu2", {
expect_equal(round(est.elu2$First[,3],2), 30805.29)
expect_equal(round(est.elu2$First[,4],2), 30582.67)
})
test_that("variance estimates sim elu2", {
expect_equal(round(est.elu2$Estimates$BT[3],2), 314.30)
expect_equal(round(est.elu2$Estimates$ZT[3],2), 308.58)
})
est.elu1 <- ccmean(elu, L = 19.9812,  addInterPol = 1)
est.elu2 <- ccmean(elu, L = 6,        addInterPol = 1)
test_that("mean estimates sim elu1", {
expect_equal(round(est.elu1$First[,3],2), 39205.09)
expect_equal(round(est.elu1$First[,4],2), 39160.99)
})
test_that("variance estimates sim elu1", {
expect_equal(round(est.elu1$Estimates$BT[3],2), 482.39)
expect_equal(round(est.elu1$Estimates$ZT[3],2), 550.58)
})
test_that("mean estimates sim elu2", {
expect_equal(round(est.elu2$First[,3],2), 30805.29)
expect_equal(round(est.elu2$First[,4],2), 30582.67)
})
test_that("variance estimates sim elu2", {
expect_equal(round(est.elu2$Estimates$BT[3],2), 314.30)
expect_equal(round(est.elu2$Estimates$ZT[3],2), 308.58)
})
ccmean(ehu, L = 10)
est.ehu1 <- ccmean(ehu, L = 12.48327, addInterPol = 1)
est.ehu2 <- ccmean(ehu, L = 6,        addInterPol = 1)
test_that("mean estimates sim ehu1", {
expect_equal(round(est.ehu1$First[,3],2),     38797.84)
expect_equal(round(est.ehu1$First[,4],2),     36847.97)
})
test_that("variance estimates sim ehu1", {
expect_equal(round(est.ehu1$Estimates$BT[3],2), 360.05)
expect_equal(round(est.ehu1$Estimates$ZT[3],2), 771.78)
})
test_that("mean estimates sim ehu2", {
expect_equal(round(est.ehu2$First[,3],2),     31458.79)
expect_equal(round(est.ehu2$First[,4],2),     31120.00)
})
test_that("variance estimates sim ehu2", {
expect_equal(round(est.ehu2$Estimates$BT[3],2), 354.33)
expect_equal(round(est.ehu2$Estimates$ZT[3],2), 342.57)
})
est1 <- ccmean(hcost, L = 1000, addInterPol = 1)
test_that("mean estimates hcost", {
expect_equal(round(est1$First[,3],2), 68236.23)
expect_equal(round(est1$First[,4],2), 66683.45)
})
test_that("variance estimates hcost", {
expect_equal(round(est1$Estimates$BT[3],2), 4410.38)
expect_equal(round(est1$Estimates$ZT[3],2), 3728.87)
})
est2 <- ccmean(hcost, L = 2000, addInterPol = 1)
test_that("mean estimates hcost", {
expect_equal(round(est2$First[,3],2), 83953.99)
expect_equal(round(est2$First[,4],2), 92439.34)
})
test_that("variance estimates hcost", {
expect_equal(round(est2$Estimates$BT[3],2), 15734.94)
expect_equal(round(est2$Estimates$ZT[3],2), 16073.06)
})
est4 <- ccmean(hcost, L = 1000, addInterPol = 1)
test_that("mean estimates hcost", {
expect_equal(round(est4$First[,3],2), 68236.23)
expect_equal(round(est4$First[,4],2), 66683.45)
})
test_that("variance estimates hcost", {
expect_equal(round(est4$Estimates$BT[3],2), 4410.38)
expect_equal(round(est4$Estimates$ZT[3],2), 3728.87)
})
est2 <- ccmean(hcost, L = 2000, addInterPol = 1)
test_that("mean estimates hcost", {
expect_equal(round(est2$First[,3],2), 83953.99)
expect_equal(round(est2$First[,4],2), 92439.34)
})
test_that("variance estimates hcost", {
expect_equal(round(est2$Estimates$BT[3],2), 15734.94)
expect_equal(round(est2$Estimates$ZT[3],2), 16073.06)
})
test_that("variance estimates hcost", {
expect_equal(round(est4$Estimates$BT[3],1), 4410.4)
expect_equal(round(est4$Estimates$ZT[3],1), 3728.9)
})
test_that("variance estimates hcost", {
expect_equal(round(est4$Estimates$BT[3]), 4410)
expect_equal(round(est4$Estimates$ZT[3]), 3729)
})
test_that("mean estimates hcost", {
expect_equal(round(est4$First[,3],1), 68236.2)
expect_equal(round(est4$First[,4],1), 66683.5)
})
test_that("mean estimates hcost", {
expect_equal(round(est4$First[,3]), 68236)
expect_equal(round(est4$First[,4]), 66684)
})
expect_equal(round(est4$First[,4]), 66683)
test_that("mean estimates hcost", {
expect_equal(round(est4$First[,3]), 68236)
expect_equal(round(est4$First[,4]), 66683)
})
est3 <- ccmean(hcost, L = 2082, addInterPol = 1)
test_that("mean estimates hcost", {
expect_equal(round(est3$First[,3],2), 83953.99)
expect_equal(round(est3$First[,4],2), 92439.34)
})
test_that("mean estimates hcost", {
expect_equal(round(est4$First[,3]),      68236)
expect_equal(round(est4$First[,4],2),      66683.45)
})
round(est4$First[,4],2)
test_that("mean estimates hcost", {
expect_equal(round(est4$First[,3],2),      68236.23)
expect_equal(round(est4$First[,4],2),      66683.45)
})
test_that("variance estimates hcost", {
expect_equal(round(est1$Estimates$BT[3],2), 7182.89)
expect_equal(round(est1$Estimates$ZT[3],2), 4870.97)
})
est1 <- ccmean(hcost, L = 1461, addInterPol = 1)
test_that("mean estimates hcost", {
expect_equal(round(est1$First[,3],2),      86175.16)
expect_equal(round(est1$First[,4],2),      80134.84)
})
test_that("variance estimates hcost", {
expect_equal(round(est1$Estimates$BT[3],2), 7182.89)
expect_equal(round(est1$Estimates$ZT[3],2), 4870.97)
})
test_that("variance estimates hcost", {
expect_equal(round(est4$Estimates$BT[3]), 4410.38)
expect_equal(round(est4$Estimates$ZT[3]), 3729.87)
})
test_that("variance estimates hcost", {
expect_equal(round(est4$Estimates$BT[3],2), 4410.38)
expect_equal(round(est4$Estimates$ZT[3],2), 3729.87)
})
est4$Estimates$ZT[3],2)
est4$Estimates$ZT[3]
test_that("variance estimates hcost", {
expect_equal(round(est4$Estimates$BT[3],2), 4410.38)
expect_equal(round(est4$Estimates$ZT[3],2), 3728.87)
})
est2 <- ccmean(hcost, L = 2000, addInterPol = 1)
test_that("mean estimates hcost", {
expect_equal(round(est2$First[,3],2),       83953.99)
expect_equal(round(est2$First[,4],2),       92439.34)
})
test_that("variance estimates hcost", {
expect_equal(round(est2$Estimates$BT[3],2), 15734.94)
expect_equal(round(est2$Estimates$ZT[3],2), 16073.06)
})
# Example dataset L = 2082 ------------------------------------------------
est3 <- ccmean(hcost, L = 2082, addInterPol = 1)
test_that("mean estimates hcost", {
expect_equal(round(est3$First[,3],2),       83953.99)
expect_equal(round(est3$First[,4],2),       92439.34)
})
test_that("variance estimates hcost", {
expect_equal(round(est3$Estimates$BT[3],2), 15734.94)
expect_equal(round(est3$Estimates$ZT[3],2), 16073.06)
})
ccmean(elu, L=10)
ccmean(simCostData(n=1000, dist = "exp", censor = "light")$censoredCostHistory, L=10)
ccmean(simCostData(n=1000, dist = "exp", censor = "light")$censoredCostHistory, L=10)
ccmean(simCostData(n=1000, dist = "exp", censor = "light")$censoredCostHistory, L=10)
ccmean(simCostData(n=1000, dist = "exp", censor = "light")$censoredCostHistory, L=10)
usethis::use_test("differing_input_data")
