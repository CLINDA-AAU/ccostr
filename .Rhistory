setwd("~/GitHub/ccostr")
build_vignettes()
devtools::use_vignette("my-vignette")
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
library(ccostr)
head(hcost)
ccmean(hcost, L = 1461, addInterPol = 1)
plot(ccmean(hcost, L = 1461, addInterPol = 1))
plot(ccmean(hcost, L = 1461, addInterPol = 1))
head(hcost)
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
#devtools::install_github("HaemAalborg/ccostr", ref = "Version-0.0.2")
library(ccostr)
library(ggplot2)
library(knitr)
library(parallel)
library(msm)
sim <- simCostData(n = 1000, dist = "unif", censor = "light", L = 10)
est <- ccmean(sim$censoredCostHistory)
est
plot(est) + geom_hline(yintercept = 40000, linetype = "dotted", size = 1)
nSim   <- 10
nYears <- 10
indv   <- 100 # increating individuals increases computing time exponential
## true mean for unif is 40000 and exp is 35956
unif_light <- lapply(1:nSim, function(x) simCostData(n = indv, dist = "unif", censor = "light", exp = TRUE, L = nYears))
unif_heavy <- lapply(1:nSim, function(x) simCostData(n = indv, dist = "unif", censor = "heavy", exp = TRUE, L = nYears))
exp_light  <- lapply(1:nSim, function(x) simCostData(n = indv, dist = "exp",  censor = "light", exp = TRUE, L = nYears))
exp_heavy  <- lapply(1:nSim, function(x) simCostData(n = indv, dist = "exp",  censor = "heavy", exp = TRUE, L = nYears))
### Estimate from censored data
nCores <- 2
cl <- makeCluster(nCores)
clusterExport(cl = cl, c("unif_light", "unif_heavy", "exp_light", "exp_heavy"))
invisible(clusterEvalQ(cl = cl, {library(dplyr)
library(ccostr)
library(data.table)
library(survival)}))
est_unif_light <- parLapply(cl, unif_light, function(x) ccmean(x$censoredCostHistory, L = 10))
est_unif_heavy <- parLapply(cl, unif_heavy, function(x) ccmean(x$censoredCostHistory, L = 10))
est_exp_light  <- parLapply(cl, exp_light,  function(x) ccmean(x$censoredCostHistory, L = 10))
est_exp_heavy  <- parLapply(cl, exp_heavy,  function(x) ccmean(x$censoredCostHistory, L = 10))
stopCluster(cl)
## Summarize
results_unif_light <- do.call(rbind, lapply(est_unif_light, function(x) x[[3]]))
results_unif_heavy <- do.call(rbind, lapply(est_unif_heavy, function(x) x[[3]]))
results_exp_light  <- do.call(rbind, lapply(est_exp_light,  function(x) x[[3]]))
results_exp_heavy  <- do.call(rbind, lapply(est_exp_heavy,  function(x) x[[3]]))
results_true <- data.frame("unif_light" = 40000,
"unif_heavy" = 40000,
"exp_light"  = 35956,
"exp_heavy"  = 35956)
results_mean <- data.frame("unif_light" = mean(sapply(unif_light, function(x) mean(x$totalCost))),
"unif_heavy" = mean(sapply(unif_heavy, function(x) mean(x$totalCost))),
"exp_light"  = mean(sapply(exp_light, function(x) mean(x$totalCost))),
"exp_heavy"  = mean(sapply(exp_heavy, function(x) mean(x$totalCost))))
results_bias <- data.frame("unif_light" = (colMeans(results_unif_light)),
"unif_heavy" = (colMeans(results_unif_heavy)),
"exp_light"  = (colMeans(results_exp_light)),
"exp_heavy"  = (colMeans(results_exp_heavy)))
results <- rbind(results_true, results_mean, results_bias)
row.names(results) <- c("true_mean", "simulation_mean", colnames(results_unif_light))
kable(results)
results_bias <- cbind(round(results[,c(1,2)] - 40000,2),
round(results[,c(3,4)] - 35956,2))
kable(results_bias)
cov_unif_light <- do.call(rbind, lapply(est_unif_light, function(x) ifelse(x[[4]][4,] >= 40000 & x[[4]][5,] <= 40000, 1, 0)))
cov_unif_heavy <- do.call(rbind, lapply(est_unif_heavy, function(x) ifelse(x[[4]][4,] >= 40000 & x[[4]][5,] <= 40000, 1, 0)))
cov_exp_light  <- do.call(rbind, lapply(est_exp_light,  function(x) ifelse(x[[4]][4,] >= 35956 & x[[4]][5,] <= 35956, 1, 0)))
cov_exp_heavy  <- do.call(rbind, lapply(est_exp_heavy,  function(x) ifelse(x[[4]][4,] >= 35956 & x[[4]][5,] <= 35956, 1, 0)))
results_coverage <- data.frame("unif_light" = (colMeans(cov_unif_light, na.rm = T)),
"unif_heavy" = (colMeans(cov_unif_heavy, na.rm = T)),
"exp_light"  = (colMeans(cov_exp_light,  na.rm = T)),
"exp_heavy"  = (colMeans(cov_exp_heavy,  na.rm = T)))
kable(results_coverage, digits = 3)
devtools::build()
library(ccostr)
devtools::install_github("HaemAalborg/ccostr", build_vignettes = TRUE)
library(ccostr)
browseVignettes("ccostr")
devtools::install_github("HaemAalborg/ccostr", build_vignettes = TRUE)
devtools::install_github("HaemAalborg/ccostr", build_vignettes = TRUE, force=TRUE)
devtools::build(vignettes=TRUE)
library(ccostr)
devtools::build(vignettes=TRUE)
library(ccostr)
browseVignettes("ccostr")
vignette(package = "ccostr")
remove.packages("ccostr", lib="~/R/R-3.6.0/library")
vignette(package = "ccostr")
library(ccostr)
vignette(package = "ccostr")
