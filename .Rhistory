svl2 <- survival:::survmean(svl1, rmean = L)
results <- list(Text  = c("CCOSTR - Estimation of censored costs"),
Data  = data.frame(Observations = nrow(x),
Induviduals  = nrow(xf),
Events       = sum(xf$delta == 1),
Limits       = L,
TotalTime    = sum(xf$surv),
MaxSurv      = L2,
row.names    = "N"),
First = data.frame(AS, CC, BT, ZT),
Estimates = round(data.frame("AvailableSample" = AS_full,
"CompleteCase"    = CC_full,
"BT"              = BT_full,
"ZT"              = ZT_full,
row.names         = c("Estimate", "Variance", "SD", "95UCI", "95LCI")),2),
Survival = svl2
)
class(results) <- "ccobject"
results
}
ccmean(hcost, L = 1461, addInterPol = 1)
# Adding to the generic print function
print.ccobject <- function(obj) {
cat("Ccostr - censored cost estimation\n\n")
print(obj$Data, row.names=TRUE)
cat("\n")
print(obj$Estimates)
cat("\nMedian survival time:", round(as.numeric(obj$Survival$matrix[5]),2), "With SE:", round(as.numeric(obj$Survival$matrix[6]),2))
}
ccmean(df_1)
ccmean(hcost, L = 1461, addInterPol = 1)
aa <- ccmean(hcost, L = 1461, addInterPol = 1)
aa$Data
aa$Estimates
aa$Estimates[1]
aa$Estimates[,1]
aa$Estimates[1,
aa$Estimates[1,]
]
aa$Estimates[1,]
aa %>% ggplot(aes(y = names(.$Estimates), x = .$Estimates[1,])) %>% geom_point()
aa %>% as.list %>% ggplot(aes(y = names(.$Estimates), x = .$Estimates[1,])) %>% geom_point()
aa$Estimates %>% ggplot(aes(y = names(.$Estimates), x = .$Estimates[1,])) %>% geom_point()
aa$Estimates %>% ggplot(aes(y = names(.$Estimates), x = .$Estimates[1,])) + geom_point()
aa$Estimates %>% ggplot(aes(y = names(.), x = .$Estimates[1,])) + geom_point()
aa$Estimates
t(aa$Estimates)
t(aa$Estimates) %>% ggplot(aes(y = rownames(.), x = Estimate)) + geom_point()
names(aa$Estimates)
tibble(name = names(aa$Estimates), est = aa$Estimates[,1], UCI=aa$Estimates[,4], LCI=aa$Estimates[,5])
tibble(name = names(aa$Estimates), est = aa$Estimates[,1], UCI=aa$Estimates[,3], LCI=aa$Estimates[,4])
LCI=aa$Estimates[,4]
aa$Estimates[,4]
tibble(name = names(aa$Estimates), est = aa$Estimates[1,], UCI=aa$Estimates[3,], LCI=aa$Estimates[4,])
aa$Estimates[4,]
aa$Estimates[[4,]]
test <- tibble(name = names(aa$Estimates), est = aa$Estimates[1,], UCI=aa$Estimates[3,], LCI=aa$Estimates[4,])
View(test)
test <- tibble(name = names(aa$Estimates), est = t(aa$Estimates[1,]), UCI=aa$Estimates[3,], LCI=aa$Estimates[4,])
test <- tibble(name = t(names(aa$Estimates)), est = aa$Estimates[1,], UCI=aa$Estimates[3,], LCI=aa$Estimates[4,])
aa$Estimates[1,]
aa %>% as_tibble
aa$Estimates %>% as_tibble
temp <- aa$Estimates %>% as_tibble %>% t()
View(temp)
temp <- aa$Estimates %>% as_tibble %>% t() %>% mutate(name=rownames(.))
temp <- aa$Estimates %>% as_tibble %>% t() %>% mutate(name=rownames
temp <- aa$Estimates %>% as_tibble %>% t() %>% mutate(name=rownames
)
temp <- aa$Estimates %>% as_tibble %>% t() %>% mutate(name=rownames)
temp <- aa$Estimates %>% as_tibble %>% t() %>% add_rownames(var="hej")
temp <- aa$Estimates %>% as_tibble %>% t() %>% rownames_to_column(var="hej")
temp <- aa$Estimates %>% as_tibble %>% t() %>% rownames_to_column(var="hej")
temp <- aa$Estimates %>%  t() %>% as_tibble %>% rownames_to_column(var="hej")
aa$Estimates %>%  t()
aa$Estimates %>%  t() %>% as_tibble
temp <- aa$Estimates %>%  t() %>% as.data.frame() %>% rownames_to_column(var="hej")
aa$Estimates %>%  t() %>% as.data.frame()
temp <- aa$Estimates %>%  t() %>% as.data.frame() %>% rownames_to_column(var="hej")
temp %>% ggplot(aes(Estimator, estimate)) + geom_point()
temp <- aa$Estimates %>%  t() %>% as.data.frame() %>% rownames_to_column(var="Estimator")
temp %>% ggplot(aes(Estimator, estimate)) + geom_point()
temp %>% ggplot(aes(Estimator, Estimate)) + geom_point()
temp %>% ggplot(aes(y = Estimate, x = Estimator, ymax = "95UCI", ymin = "95LCI")) +
geom_point() +
geom_errorbar(width = 0.2, size = 1.1)
temp %>% ggplot(aes(y = Estimate, x = Estimator, ymax = "95UCI", ymin = "95LCI")) +
geom_point()
temp %>% ggplot(aes(x = Estimate, y = Estimator, ymax = "95UCI", ymin = "95LCI")) +
geom_point()
temp %>% ggplot(aes(x = Estimate, y = Estimator, ymax = "95UCI", ymin = "95LCI")) +
geom_point() +
geom_errorbar(width = 0.2, size = 1.1)
temp %>% ggplot(aes(x = Estimate, y = Estimator, ymax = .$"95UCI", ymin = .$"95LCI")) +
geom_point() +
geom_errorbar(width = 0.2, size = 1.1)
temp %>% ggplot(aes(y = Estimate, x = Estimator, ymax = .$"95UCI", ymin = .$"95LCI")) +
geom_point() +
geom_errorbar(width = 0.2, size = 1.1)
temp %>% ggplot(aes(y = Estimate, x = Estimator, ymax = .$"95UCI", ymin = .$"95LCI")) +
geom_point() +
geom_errorbar(width = 0.2, size = 1.1) +
coord_flip()
temp %>% ggplot(aes(y = Estimate, x = Estimator, ymax = .$"95UCI", ymin = .$"95LCI")) +
geom_point(size=5) +
geom_errorbar(width = 0.2, size = 1.1) +
coord_flip()
temp %>% ggplot(aes(y = Estimate, x = Estimator, ymax = .$"95UCI", ymin = .$"95LCI")) +
geom_point(shape=22, size=5) +
geom_errorbar(width = 0.2, size = 1.1) +
coord_flip()
temp %>% ggplot(aes(y = Estimate, x = Estimator, ymax = .$"95UCI", ymin = .$"95LCI")) +
geom_point(shape=15, size=5) +
geom_errorbar(width = 0.2, size = 1.1) +
coord_flip()
ggplot(order_by(Estimator, ~Estimate, temp), aes(y = Estimate, x = order(Estimator, ymax = .$"95UCI", ymin = .$"95LCI")) +
coord_flip()
ggplot(order_by(Estimator, ~Estimate, temp), aes(y = Estimate, x = Estimator, ymax = .$"95UCI", ymin = .$"95LCI")) +
geom_point(shape=15, size=5) +
geom_errorbar(width = 0.2, size = 1.1) +
coord_flip()
ggplot(temp, aes(y = Estimate, x = Estimator, ymax = .$"95UCI", ymin = .$"95LCI")) +
geom_point(shape=15, size=5) +
geom_errorbar(width = 0.2, size = 1.1) +
coord_flip()
ggplot(order_by(Estimator, ~Estimate, temp), aes(y = Estimate, x = Estimator, ymax = temp$"95UCI", ymin = temp$"95LCI")) +
geom_point(shape=15, size=5) +
geom_errorbar(width = 0.2, size = 1.1) +
coord_flip()
order_by(Estimator, ~Estimate, temp) %>%
ggplot(aes(y = Estimate, x = Estimator, ymax = .$"95UCI", ymin = .$"95LCI")) +
geom_point(shape=15, size=5) +
geom_errorbar(width = 0.2, size = 1.1) +
coord_flip()
order_by(Estimator, ~Estimate) %>%
ggplot(aes(y = Estimate, x = Estimator, ymax = .$"95UCI", ymin = .$"95LCI")) +
geom_point(shape=15, size=5) +
geom_errorbar(width = 0.2, size = 1.1) +
coord_flip()
temp %>%
order_by(Estimator, ~Estimate) %>%
ggplot(aes(y = Estimate, x = Estimator, ymax = .$"95UCI", ymin = .$"95LCI")) +
geom_point(shape=15, size=5) +
geom_errorbar(width = 0.2, size = 1.1) +
coord_flip()
temp %>%
order_by(Estimate, ~Estimator) %>%
ggplot(aes(y = Estimate, x = Estimator, ymax = .$"95UCI", ymin = .$"95LCI")) +
geom_point(shape=15, size=5) +
geom_errorbar(width = 0.2, size = 1.1) +
coord_flip()
temp %>%
order_by(Estimator, ~Estimate)
temp %>%
order_by(Estimator) %>%
ggplot(aes(y = Estimate, x = Estimator, ymax = .$"95UCI", ymin = .$"95LCI")) +
geom_point(shape=15, size=5) +
geom_errorbar(width = 0.2, size = 1.1) +
coord_flip()
temp %>%
order_by(Estimator)
temp %>%
order_by(Estimator, ~Estimate)
temp %>%
order_by(order_by = Estimate)
temp %>%
order_by(Estimator, order_by = Estimate) %>%
ggplot(aes(y = Estimate, x = Estimator, ymax = .$"95UCI", ymin = .$"95LCI")) +
geom_point(shape=15, size=5) +
geom_errorbar(width = 0.2, size = 1.1) +
coord_flip()
temp %>%
order_by(Estimator, order_by = Estimate)
temp %>%
ggplot(aes(y = Estimate, x = Estimator, ymax = .$"95UCI", ymin = .$"95LCI")) +
geom_point(shape=15, size=5) +
geom_errorbar(width = 0.2, size = 1.1) +
coord_flip()
temp %>%
ggplot(aes(y = Estimate, x = fct_reorder(Estimator,Estimate), ymax = .$"95UCI", ymin = .$"95LCI")) +
geom_point(shape=15, size=5) +
geom_errorbar(width = 0.2, size = 1.1) +
coord_flip()
temp %>%
ggplot(aes(y = Estimate, x = fct_reorder(Estimator,Estimate), ymax = .$"95UCI", ymin = .$"95LCI")) +
geom_point(shape=15, size=5) +
geom_errorbar(width = 0.2, size = 1.1) +
coord_flip() +
labs(title="Estimators", y="")
temp %>%
ggplot(aes(y = Estimate, x = fct_reorder(Estimator,Estimate), ymax = .$"95UCI", ymin = .$"95LCI")) +
geom_point(shape=15, size=5) +
geom_errorbar(width = 0.2, size = 1.1) +
coord_flip() +
labs(title="Estimators", X = "")
temp %>%
ggplot(aes(y = Estimate, x = fct_reorder(Estimator,Estimate), ymax = .$"95UCI", ymin = .$"95LCI")) +
geom_point(shape=15, size=5) +
geom_errorbar(width = 0.2, size = 1.1) +
coord_flip() +
labs(title="Estimators", X = "")
temp %>%
ggplot(aes(y = Estimate, x = fct_reorder(Estimator,Estimate), ymax = .$"95UCI", ymin = .$"95LCI")) +
geom_point(shape=15, size=5) +
geom_errorbar(width = 0.2, size = 1.1) +
coord_flip() +
labs(title="Estimators", x = "")
# Adding to the generic plot function
plot.ccobject <- function(obj) {
temp <- obj$Estimates %>%  t() %>% as.data.frame() %>% rownames_to_column(var="Estimator")
temp$Estimator <- factor(temp$Estimator, labels = )
temp %>%
ggplot(aes(y = Estimate, x = fct_reorder(Estimator,Estimate), ymax = .$"95UCI", ymin = .$"95LCI")) +
geom_point(shape=15, size=5) +
geom_errorbar(width = 0.2, size = 1.1) +
coord_flip() +
labs(title="Estimators", x = "")
}
aa <- ccmean(hcost, L = 1461, addInterPol = 1)
aa
plot(aa)
plot(ccmean(df_1))
plot(ccmean(df_2))
save(hcost, file="Data/hcost.RData")
ccmean <- function(x, id = "id", cost = "cost", start = "start", stop = "stop", delta = "delta", surv = "surv", L = NA, addInterPol = 0) {
# Set estimation period if undefined
if(is.na(L)) L <- max(x$surv)
L2 <- max(x$surv)
# Subset to estimation period
x$delta[x$surv > L] <- 1
x$surv <- pmin(x$surv, L)
x <- subset(x, start < L)
# Adjust overlapping costs
x$cost <- ifelse(x$stop > x$surv, x$cost * ((x$surv-x$start + addInterPol)/(x$stop-x$start + addInterPol)), x$cost)
x$stop <- pmin(x$stop, L)
# Ordering the dataset
x <- x %>% arrange(surv, delta)
# Some calculations don't use cost history and therefore collapse by ID
xf <- x %>%
group_by(id) %>%
summarize(cost  = sum(cost, na.rm=T),
delta = last(delta),
surv  = first(surv))
#################################################################
##                          section 1:                         ##
##                   Naive (Avaiable Sample)                   ##
#################################################################
# Costs are summed and a mean are found
AS <- mean(xf$cost)
AS_var <- var(xf$cost)/nrow(xf)
AS_full <- c(AS,
AS_var,
sqrt(AS_var),
AS + 1.96 * sqrt(AS_var),
AS - 1.96 * sqrt(AS_var))
#################################################################
##                          section 2:                         ##
##                    Naive (complete case)                    ##
#################################################################
# Costs are summed up and calculated mean
CC <- mean(xf$cost[xf$delta==1])
CC_var <- var(xf$cost[xf$delta==1])/sum(xf$delta)
CC_full <- c(CC,
CC_var,
sqrt(CC_var),
CC + 1.96 * sqrt(CC_var),
CC - 1.96 * sqrt(CC_var))
# #################################################################
# ##                          section 4:                         ##
# ##                     Lin's method (1997)                     ##
# #################################################################
#
# # Kaplan-meier for censoring distribution get censoring times to define intervals
# sc <- summary(survfit(Surv(xf$surv, xf$delta == 0) ~ 1))
# censBreaks <- c(0, sc$time, Inf)
#
# # calculate average costs of patients deceased within each interval
# a <- subset(xf, delta == 1) %>%
#     mutate(ints = cut(surv, breaks = censBreaks, dig.lab = 5)) %>%
#     group_by(ints) %>%
#     summarise(mean = mean(cost))
#
# # Get survival times for intervals
# sd <- survfit(Surv(xf$surv, xf$delta == 1) ~ 1)
# intLow <- as.numeric(gsub("\\(", "", sapply(strsplit(as.character(a$ints), ","), function(x) x[[1]])))
# intHigh <- as.numeric(gsub("\\]", "", sapply(strsplit(as.character(a$ints), ","), function(x) x[[2]])))
# svLow <- summary(sd, times = intLow)$surv
# svHigh <- c(summary(sd, times = intHigh)$surv)
# if(length(svHigh) < length(svLow)){ ## Add zero if last value of intHigh is Inf
# 	svHigh <- c(svHigh,0)
# }
#
# # Gathering the data in a new dataframe
# d <- data.frame(a, "survDif" = svLow-svHigh)
#
# # calculating Lin's T estimate of total costs
# LinT <- sum(d$survDif*d$mean, na.rm=T)
#################################################################
##                          section 5:                         ##
##               Bang and Tsiatis's method (2000)              ##
#################################################################
# Kaplan-Meier curve for censoring
sc <- summary(survfit(Surv(xf$surv, xf$delta == 0) ~ 1),
times = xf$surv)
sct <- data.frame(sc$time, sc$surv)
sct$sc.surv[sct$sc.surv == 0] <- min(sct$sc.surv[sct$sc.surv != 0])
sct <- unique(sct)
## Kaplan-Meier curve for survival
s <- summary(survfit(Surv(xf$surv, xf$delta) ~ 1),
times = xf$surv)
st <- data.frame(s$time, s$surv)
st <- unique(st)
# Merge probalities of censoring and survival to data
t <- merge(xf, sct, by.x = "surv", by.y = "sc.time", all.x = T)
t <- merge(t, st, by.x = "surv", by.y = "s.time", all.x = T)
# Calculate Bang and Tsiatis cost estimator
BT <- mean((t$cost*t$delta)/t$sc.surv)
# START VAR BT ------------------------------------------------------------
n <- length(t$cost)
t$GA <- rep(0, n)
t$GB <- rep(0, n)
for(i in 1:n){
if(t$delta[i] == 1) next
t2 <- subset(t, surv >= t$surv[i])
t$GA[i] <- (1 / (n*t$s.surv[i])) * sum(t2$delta * t2$cost^2 / t2$sc.surv)
t$GB[i] <- (1 / (n*t$s.surv[i])) * sum(t2$delta * t2$cost / t2$sc.surv)
}
BT_var <- 1 / n * (mean(t$delta * (t$cost-BT)^2 / t$sc.surv) +
mean(((1 - t$delta) / t$sc.surv^2 ) * (t$GA - t$GB^2)))
BT_full <- c(BT,
BT_var,
sqrt(BT_var),
BT + 1.96 * sqrt(BT_var),
BT - 1.96 * sqrt(BT_var))
# END VAR BT --------------------------------------------------------------
#################################################################
##                          section 6:                         ##
##                Zhao and Tian's method (2001)                ##
#################################################################
## For each censored individual i calculate cost
## of longer surviving individuals up till time ti
runCostMatrix <- matrix(0, nrow = nrow(t), ncol = nrow(t))
t$mcostlsurv <- 0
t$mcostlsurvSq <- 0
for(i in 1:nrow(t)){
if(t$delta[i] == 1){
next
} else{
t_data2 <- subset(x, start <= t$surv[i])
t_data2$cost <- ifelse(t_data2$stop > t$surv[i],
(t_data2$cost/(t_data2$stop-t_data2$start + addInterPol))*
(t$surv[i]-t_data2$start +addInterPol),
t_data2$cost)
# summarized
t_data_total_temp <- t_data2 %>%
group_by(id) %>%
summarize(cost = sum(cost, na.rm=T),
surv= first(surv))
# Store in runCostMatrix for kept ids
idIndex <- t$id %in% t_data_total_temp$id
ids     <- t$id[idIndex]
runCost <- t_data_total_temp$cost
names(runCost) <- t_data_total_temp$id
runCostMatrix[idIndex,i] <- runCost[as.character(ids)]
# Get mean runCost for longer surviving ids
t$mcostlsurv[i]   <- mean(t_data_total_temp$cost[t_data_total_temp$surv >= t$surv[i]])
t$mcostlsurvSq[i] <- mean(t_data_total_temp$cost[t_data_total_temp$surv >= t$surv[i]]^2)
}
}
ZT <- mean((t$delta * (t$cost / t$sc.surv))) + mean(((1-t$delta) * ((t$cost-t$mcostlsurv) / t$sc.surv)), na.rm=T)
## Estimate variance
n <- nrow(t)
t$gm  <- rep(0,n)
t$gmm <- rep(0,n)
for(i in 1:n){
if(t$delta[i] == 1) next
t$gm[i]  <- (1/(n*t$s.surv[i])) * sum(as.numeric(t$surv >= t$surv[i]) * t$delta * runCostMatrix[,i] / t$sc.surv)
t$gmm[i] <- (1/(n*t$s.surv[i])) * sum(as.numeric(t$surv >= t$surv[i]) * t$delta * t$cost * runCostMatrix[,i] / t$sc.surv)
}
ZT_var <- BT_var - (2/n^2) * sum(((1-t$delta) /  t$sc.surv^2) * (t$gmm - t$GB * t$gm)) +
(1/n^2) * sum(((1-t$delta) /  t$sc.surv^2) * (t$mcostlsurvSq - t$mcostlsurv^2))
ZT_full <- c(ZT,
ZT_var,
sqrt(ZT_var),
ZT + 1.96 * sqrt(ZT_var),
ZT - 1.96 * sqrt(ZT_var))
#################################################################
##                          section 7:                         ##
##                           Results                           ##
#################################################################
svl1 <- survival::survfit(Surv(xf$surv, xf$delta == 1) ~ 1)
svl2 <- survival:::survmean(svl1, rmean = L)
results <- list(Text  = c("CCOSTR - Estimation of censored costs"),
Data  = data.frame(Observations = nrow(x),
Induviduals  = nrow(xf),
Events       = sum(xf$delta == 1),
Limits       = L,
TotalTime    = sum(xf$surv),
MaxSurv      = L2,
row.names    = "N"),
First = data.frame(AS, CC, BT, ZT),
Estimates = round(data.frame("AvailableSample" = AS_full,
"CompleteCase"    = CC_full,
"BT"              = BT_full,
"ZT"              = ZT_full,
row.names         = c("Estimate", "Variance", "SD", "95UCI", "95LCI")),2),
Survival = svl2
)
class(results) <- "ccobject"
results
}
ccmean(df_1)
plot(ccmean(df_1))
library(ccostr)
ddd <- data(hcost)
ddd
ddd <- data("hcost")
data(hcost)
data(hcost)
View(hcost)
library(ccostr)
data(hcost)
dat <- data(hcost)
data(hcost)
df_1 <- data.frame(id    = c("A", "A", "A", "B" ,"C", "C"),
start = c(1,30,88,18,1,67),
stop  = c(1,82,88,198,5,88),
cost  = c(550,1949,45,4245,23,567),
delta = c(0,0,0,0,1,1),
surv  = c(343,343,343,903,445,445))
kable(df_1)
ccostr::ccmean(df_1)
plot(ccostr::ccmean(df_1))
library(tidyverse)
plot(ccostr::ccmean(df_1))
plot(ccostr::ccmean(hcost))
ccostr::ccmean(hcost)
ccostr::ccmean(hcost, L=1461)
devtools::install_github("HaemAalborg/ccostr/tree/Version-0.0.2")
devtools::install_github("HaemAalborg/ccostr", ref="Version-0.0.2")
library(ccostr)
new <- data(hcost)
data(hcost)
ccmean(1)
hvost
hcost
ccmean(hcost)
hcost
a <- ccmean(hcost)
a
plot(a)
library(tidyverse)
plot(a)
a <- ccmean(hcost, L = 1461)
a
plot(a)
test <- simCostData(n = 1000, dist = "unif", censor = "light", L = 10)
ccmean(test)
ccmean(test$totalCost)
ccmean(test$censoredCostHistory)
test <- simCostData(n = 1000, dist = "unif", censor = "heavy", L = 10)
ccmean(test$censoredCostHistory)
c2 <- ccmean(sim$censoredCostHistory)
c2
plot(c2)
sim <- simCostData(n = 1000, dist = "unif", censor = "heavy", L = 10)
c2 <- ccmean(sim$censoredCostHistory)
c2
plot(c2)
c2
plot(c2)
plot(c2) + geom_hline(yintercept=40000)
plot(c2) + geom_hline(yintercept = 40000) + geom_text(aes(40000,"BT"), "hej")
plot(c2) + geom_hline(yintercept = 40000) + geom_text(aes(40000,"BT", "hej"))
plot(c2) + geom_hline(yintercept = 40000, linetype="dotted")
plot(c2) + geom_hline(yintercept = 40000, linetype="dotted", size=2)
plot(c2) + geom_hline(yintercept = 40000, linetype="dotted", size=1)
sim <- simCostData(n = 1000, dist = "unif", censor = "light", L = 10)
c2 <- ccmean(sim$censoredCostHistory)
c2
# True value 40.000
plot(c2) + geom_hline(yintercept = 40000, linetype="dotted", size=1)
devtools::install_github("HaemAalborg/ccostr/tree/Version-0.0.2")
devtools::install_github("HaemAalborg/ccostr", ref = "Version-0.0.2")
devtools::install_github("HaemAalborg/ccostr", ref = "Version-0.0.2")
library(tidyverse)
library(survival)
library(ccostr)
hcost
c1 <- ccmean(hcost, L = 1461)
c1
plot(c1)
sim <- simCostData(n = 1000, dist = "unif", censor = "light", L = 10)
c2 <- ccmean(sim$censoredCostHistory)
c2
# True value 40.000
plot(c2) + geom_hline(yintercept = 40000, linetype="dotted", size=1)
sim <- simCostData(n = 100, dist = "unif", censor = "heavy", L = 10)
c2 <- ccmean(sim$censoredCostHistory)
c2
# True value 40.000
plot(c2) + geom_hline(yintercept = 40000, linetype="dotted", size=1) + labs(subtitle="True value = 40.000")
sim <- simCostData(n = 1000, dist = "unif", censor = "heavy", L = 10)
c2 <- ccmean(sim$censoredCostHistory)
c2
# True value 40.000
plot(c2) + geom_hline(yintercept = 40000, linetype="dotted", size=1) + labs(subtitle="True value = 40.000")
sim <- simCostData(n = 1000, dist = "unif", censor = "heavy", L = 10)
c2 <- ccmean(sim$censoredCostHistory)
c2
# True value 40.000
plot(c2) + geom_hline(yintercept = 40000, linetype="dotted", size=1) + labs(subtitle="True value = 40.000")
