# intLow <- as.numeric(gsub("\\(", "", sapply(strsplit(as.character(a$ints), ","), function(x) x[[1]])))
# intHigh <- as.numeric(gsub("\\]", "", sapply(strsplit(as.character(a$ints), ","), function(x) x[[2]])))
# svLow <- summary(sd, times = intLow)$surv
# svHigh <- c(summary(sd, times = intHigh)$surv)
# if(length(svHigh) < length(svLow)){ ## Add zero if last value of intHigh is Inf
# 	svHigh <- c(svHigh,0)
# }
#
# # Gathering the data in a new dataframe
# d <- data.frame(a, "survDif" = svLow-svHigh)
#
# # calculating Lin's T estimate of total costs
# LinT <- sum(d$survDif*d$mean, na.rm=T)
#################################################################
##                          section 5:                         ##
##               Bang and Tsiatis's method (2000)              ##
#################################################################
# Kaplan-Meier curve for censoring
sc <- summary(survfit(Surv(xf$surv, xf$delta == 0) ~ 1), times = xf$surv)
sct <- data.frame(sc$time, sc$surv)
sct$sc.surv[sct$sc.surv == 0] <- min(sct$sc.surv[sct$sc.surv != 0])
sct <- unique(sct)
## Kaplan-Meier curve for survival
s <- summary(survfit(Surv(xf$surv, xf$delta) ~ 1), times = xf$surv)
st <- data.frame(s$time, s$surv)
st <- unique(st)
# Merge probalities of censoring and survival to data
t <- merge(xf, sct, by.x = "surv", by.y = "sc.time", all.x = T)
t <- merge(t, st, by.x = "surv", by.y = "s.time", all.x = T)
# Calculate Bang and Tsiatis cost estimator
BT <- mean((t$cost*t$delta)/t$sc.surv)
# Variance of BT
n <- length(t$cost)
t$GA <- rep(0, n)
t$GB <- rep(0, n)
for(i in 1:n){
if(t$delta[i] == 1) next
t2 <- subset(t, surv >= t$surv[i])
t$GA[i] <- (1 / (n*t$s.surv[i])) * sum(t2$delta * t2$cost^2 / t2$sc.surv)
t$GB[i] <- (1 / (n*t$s.surv[i])) * sum(t2$delta * t2$cost / t2$sc.surv)
}
BT_var <- 1 / n * (mean(t$delta * (t$cost-BT)^2 / t$sc.surv) +
mean(((1 - t$delta) / t$sc.surv^2 ) * (t$GA - t$GB^2)))
# Results
BT_full <- c(BT,
BT_var,
sqrt(BT_var),
BT + 1.96 * sqrt(BT_var),
BT - 1.96 * sqrt(BT_var))
#################################################################
##                          section 6:                         ##
##                Zhao and Tian's method (2001)                ##
#################################################################
## For each censored individual i calculate cost
## of longer surviving individuals up till time ti
runCostMatrix <- matrix(0, nrow = nrow(t), ncol = nrow(t))
t$mcostlsurv <- 0
t$mcostlsurvSq <- 0
for(i in 1:nrow(t)){
if(t$delta[i] == 1){
next
} else {
x2 <- as.data.table(x)
x2 <- x2[start <= t$surv[i]]
x3 <- x2[,cost2 := ifelse(stop > t$surv[i], (cost/(stop - start + addInterPol)) * (t$surv[i] - start + addInterPol), cost)]
t_data2 <- x3[, list(cost = sum(cost2), surv = first(surv)), by = list(id)]
# Store in runCostMatrix for kept ids
idIndex                  <- t$id %in% t_data2$id
ids                      <- t$id[idIndex]
runCost                  <- t_data2$cost
names(runCost)           <- t_data2$id
runCostMatrix[idIndex,i] <- runCost[as.character(ids)]
# Get mean runCost for longer surviving ids
t$mcostlsurv[i]   <- mean(t_data2$cost[t_data2$surv >= t$surv[i]])
t$mcostlsurvSq[i] <- mean(t_data2$cost[t_data2$surv >= t$surv[i]]^2)
}
}
ZT <- mean((t$delta * (t$cost / t$sc.surv))) + mean(((1-t$delta) * ((t$cost-t$mcostlsurv) / t$sc.surv)), na.rm=T)
## Variance of ZT
n <- nrow(t)
t$gm  <- rep(0,n)
t$gmm <- rep(0,n)
for(i in 1:n){
if(t$delta[i] == 1) next
t$gm[i]  <- (1/(n*t$s.surv[i])) * sum(as.numeric(t$surv >= t$surv[i]) * t$delta * runCostMatrix[,i] / t$sc.surv)
t$gmm[i] <- (1/(n*t$s.surv[i])) * sum(as.numeric(t$surv >= t$surv[i]) * t$delta * t$cost * runCostMatrix[,i] / t$sc.surv)
}
ZT_var <- BT_var - (2/n^2) * sum(((1-t$delta) /  t$sc.surv^2) * (t$gmm - t$GB * t$gm)) +
(1/n^2) * sum(((1-t$delta) /  t$sc.surv^2) * (t$mcostlsurvSq - t$mcostlsurv^2))
# Results
ZT_full <- c(ZT,
ZT_var,
sqrt(ZT_var),
ZT + 1.96 * sqrt(ZT_var),
ZT - 1.96 * sqrt(ZT_var))
#################################################################
##                          section 7:                         ##
##                           Results                           ##
#################################################################
svl1 <- survival::survfit(Surv(xf$surv, xf$delta == 1) ~ 1)
svl2 <- survival:::survmean(svl1, rmean = L)
results <- list(Text  = c("ccostr - Estimates of mean cost with censored data"),
Data  = data.frame(Observations = nrow(x),
Induviduals  = nrow(xf),
Events       = sum(xf$delta == 1),
Limits       = L,
TotalTime    = sum(xf$surv),
MaxSurv      = L2,
row.names    = "N"),
First = data.frame(AS, CC, BT, ZT),
Estimates = round(data.frame("AvailableSample" = AS_full,
"CompleteCase"    = CC_full,
"BT"              = BT_full,
"ZT"              = ZT_full,
row.names         = c("Estimate", "Variance", "SD", "95UCI", "95LCI")),2),
Survival = svl2
)
class(results) <- "ccobject"
results
}
hcost
ccmean(hcost)
ccmean2(hcost)
ccmean2 <- function(x, id = "id", cost = "cost", start = "start", stop = "stop", delta = "delta", surv = "surv", L = NA, addInterPol = 0) {
# Set estimation period if undefined
if(is.na(L)) L <- max(x$surv)
L2             <- max(x$surv)
# Subset to estimation period
x$delta[x$surv > L] <- 1
x$surv              <- pmin(x$surv, L)
x                   <- subset(x, start < L)
# Adjust overlapping costs
x$cost <- ifelse(x$stop > x$surv, x$cost * ((x$surv-x$start + addInterPol)/(x$stop-x$start + addInterPol)), x$cost)
x$stop <- pmin(x$stop, L)
# Ordering the dataset
x <- x %>% arrange(surv, delta)
# Some calculations don't use cost history and therefore collapse by ID
xf <- x %>%
group_by(id) %>%
summarize(cost  = sum(cost, na.rm=T),
delta = last(delta),
surv  = first(surv))
#################################################################
##                          section 1:                         ##
##                   Naive (Avaiable Sample)                   ##
#################################################################
AS      <- mean(xf$cost)
AS_var  <- var(xf$cost)/nrow(xf)
# Results
AS_full <- c(AS,
AS_var,
sqrt(AS_var),
AS + 1.96 * sqrt(AS_var),
AS - 1.96 * sqrt(AS_var))
#################################################################
##                          section 2:                         ##
##                    Naive (complete case)                    ##
#################################################################
CC      <- mean(xf$cost[xf$delta==1])
CC_var  <- var(xf$cost[xf$delta==1])/sum(xf$delta)
# Results
CC_full <- c(CC,
CC_var,
sqrt(CC_var),
CC + 1.96 * sqrt(CC_var),
CC - 1.96 * sqrt(CC_var))
# #################################################################
# ##                          section 4:                         ##
# ##                     Lin's method (1997)                     ##
# #################################################################
#
# # Kaplan-meier for censoring distribution get censoring times to define intervals
# sc <- summary(survfit(Surv(xf$surv, xf$delta == 0) ~ 1))
# censBreaks <- c(0, sc$time, Inf)
#
# # calculate average costs of patients deceased within each interval
# a <- subset(xf, delta == 1) %>%
#     mutate(ints = cut(surv, breaks = censBreaks, dig.lab = 5)) %>%
#     group_by(ints) %>%
#     summarise(mean = mean(cost))
#
# # Get survival times for intervals
# sd <- survfit(Surv(xf$surv, xf$delta == 1) ~ 1)
# intLow <- as.numeric(gsub("\\(", "", sapply(strsplit(as.character(a$ints), ","), function(x) x[[1]])))
# intHigh <- as.numeric(gsub("\\]", "", sapply(strsplit(as.character(a$ints), ","), function(x) x[[2]])))
# svLow <- summary(sd, times = intLow)$surv
# svHigh <- c(summary(sd, times = intHigh)$surv)
# if(length(svHigh) < length(svLow)){ ## Add zero if last value of intHigh is Inf
# 	svHigh <- c(svHigh,0)
# }
#
# # Gathering the data in a new dataframe
# d <- data.frame(a, "survDif" = svLow-svHigh)
#
# # calculating Lin's T estimate of total costs
# LinT <- sum(d$survDif*d$mean, na.rm=T)
#################################################################
##                          section 5:                         ##
##               Bang and Tsiatis's method (2000)              ##
#################################################################
# Kaplan-Meier curve for censoring
sc <- summary(survfit(Surv(xf$surv, xf$delta == 0) ~ 1), times = xf$surv)
sct <- data.frame(sc$time, sc$surv)
sct$sc.surv[sct$sc.surv == 0] <- min(sct$sc.surv[sct$sc.surv != 0])
sct <- unique(sct)
## Kaplan-Meier curve for survival
s <- summary(survfit(Surv(xf$surv, xf$delta) ~ 1), times = xf$surv)
st <- data.frame(s$time, s$surv)
st <- unique(st)
# Merge probalities of censoring and survival to data
t <- merge(xf, sct, by.x = "surv", by.y = "sc.time", all.x = T)
t <- merge(t, st, by.x = "surv", by.y = "s.time", all.x = T)
# Calculate Bang and Tsiatis cost estimator
BT <- mean((t$cost*t$delta)/t$sc.surv)
# Variance of BT
n <- length(t$cost)
t$GA <- rep(0, n)
t$GB <- rep(0, n)
for(i in 1:n){
if(t$delta[i] == 1) next
t2 <- subset(t, surv >= t$surv[i])
t$GA[i] <- (1 / (n*t$s.surv[i])) * sum(t2$delta * t2$cost^2 / t2$sc.surv)
t$GB[i] <- (1 / (n*t$s.surv[i])) * sum(t2$delta * t2$cost / t2$sc.surv)
}
BT_var <- 1 / n * (mean(t$delta * (t$cost-BT)^2 / t$sc.surv) +
mean(((1 - t$delta) / t$sc.surv^2 ) * (t$GA - t$GB^2)))
# Results
BT_full <- c(BT,
BT_var,
sqrt(BT_var),
BT + 1.96 * sqrt(BT_var),
BT - 1.96 * sqrt(BT_var))
#################################################################
##                          section 6:                         ##
##                Zhao and Tian's method (2001)                ##
#################################################################
## For each censored individual i calculate cost
## of longer surviving individuals up till time ti
runCostMatrix <- matrix(0, nrow = nrow(t), ncol = nrow(t))
t$mcostlsurv <- 0
t$mcostlsurvSq <- 0
for(i in 1:nrow(t)){
if(t$delta[i] == 1){
next
} else {
x2 <- as.data.table(x)
x2 <- x2[start <= t$surv[i]]
x3 <- x2[,cost2 := ifelse(stop > t$surv[i], (cost/(stop - start + addInterPol)) * (t$surv[i] - start + addInterPol), cost)]
t_data2 <- x3[, list(cost = sum(cost2), surv = first(surv)), by = list(id)]
# Store in runCostMatrix for kept ids
idIndex                  <- t$id %in% t_data2$id
ids                      <- t$id[idIndex]
runCost                  <- t_data2$cost
names(runCost)           <- t_data2$id
runCostMatrix[idIndex,i] <- runCost[as.character(ids)]
# Get mean runCost for longer surviving ids
t$mcostlsurv[i]   <- mean(t_data2$cost[t_data2$surv >= t$surv[i]])
t$mcostlsurvSq[i] <- mean(t_data2$cost[t_data2$surv >= t$surv[i]]^2)
}
}
ZT <- mean((t$delta * (t$cost / t$sc.surv))) + mean(((1-t$delta) * ((t$cost-t$mcostlsurv) / t$sc.surv)), na.rm=T)
## Variance of ZT
n <- nrow(t)
t$gm  <- rep(0,n)
t$gmm <- rep(0,n)
for(i in 1:n){
if(t$delta[i] == 1) next
t$gm[i]  <- (1/(n*t$s.surv[i])) * sum(as.numeric(t$surv >= t$surv[i]) * t$delta * runCostMatrix[,i] / t$sc.surv)
t$gmm[i] <- (1/(n*t$s.surv[i])) * sum(as.numeric(t$surv >= t$surv[i]) * t$delta * t$cost * runCostMatrix[,i] / t$sc.surv)
}
ZT_var <- BT_var - (2/n^2) * sum(((1-t$delta) /  t$sc.surv^2) * (t$gmm - t$GB * t$gm)) +
(1/n^2) * sum(((1-t$delta) /  t$sc.surv^2) * (t$mcostlsurvSq - t$mcostlsurv^2))
# Results
ZT_full <- c(ZT,
ZT_var,
sqrt(ZT_var),
ZT + 1.96 * sqrt(ZT_var),
ZT - 1.96 * sqrt(ZT_var))
#################################################################
##                          section 7:                         ##
##                           Results                           ##
#################################################################
svl1 <- survival::survfit(Surv(xf$surv, xf$delta == 1) ~ 1)
svl2 <- survival:::survmean(svl1, rmean = L)
results <- list(Text  = c("ccostr - Estimates of mean cost with censored data"),
Data  = data.frame(Observations = nrow(x),
Induviduals  = nrow(xf),
Events       = sum(xf$delta == 1),
Limits       = L,
TotalTime    = sum(xf$surv),
MaxSurv      = L2,
row.names    = "N"),
First = data.frame(AS, CC, BT, ZT),
Estimates = round(data.frame("AvailableSample" = AS_full,
"CompleteCase"    = CC_full,
"BT"              = BT_full,
"ZT"              = ZT_full,
row.names         = c("Estimate", "Variance", "SD", "95UCI", "95LCI")),2),
Survival = svl2
)
class(results) <- "ccobject"
results
}
ccostr::ccmean(hcost)
ccmean2(hcost)
x <- simCostData(n=1000, dist="unif", censor = "light", L=10)$censoredCostHistory
tt0 <- Sys.time()
ccostr::ccmean(x)
tt1 <- Sys.time()
ccmean2(x)
tt2 <- Sys.time()
tt0-tt1
tt1-tt2
x <- simCostData(n=10000, dist="unif", censor = "light", L=10)$censoredCostHistory
tt0 <- Sys.time()
ccostr::ccmean(x)
tt1 <- Sys.time()
ccmean2(x)
tt2 <- Sys.time()
tt0-tt1
tt1-tt2
ccmean2(hcost)
scale_color_npg()
install.packages("ggsci")
library(ggsci)
pal_npg()
pal_npg(3)
pal_npg(c(3))
ccmean2 <- function(x, id = "id", cost = "cost", start = "start", stop = "stop", delta = "delta", surv = "surv", L = NA, addInterPol = 0) {
# Set estimation period if undefined
if(is.na(L)) L <- max(x$surv)
L2             <- max(x$surv)
# Subset to estimation period
x$delta[x$surv > L] <- 1
x$surv              <- pmin(x$surv, L)
x                   <- subset(x, start < L)
# Adjust overlapping costs
x$cost <- ifelse(x$stop > x$surv, x$cost * ((x$surv-x$start + addInterPol)/(x$stop-x$start + addInterPol)), x$cost)
x$stop <- pmin(x$stop, L)
# Ordering the dataset
x <- x %>% arrange(surv, delta)
# Some calculations don't use cost history and therefore collapse by ID
xf <- x %>%
group_by(id) %>%
summarize(cost  = sum(cost, na.rm=T),
delta = last(delta),
surv  = first(surv))
#################################################################
##                          section 1:                         ##
##                   Naive (Avaiable Sample)                   ##
#################################################################
AS      <- mean(xf$cost)
AS_var  <- var(xf$cost)/nrow(xf)
# Results
AS_full <- c(AS,
AS_var,
sqrt(AS_var),
AS + 1.96 * sqrt(AS_var),
AS - 1.96 * sqrt(AS_var))
#################################################################
##                          section 2:                         ##
##                    Naive (complete case)                    ##
#################################################################
CC      <- mean(xf$cost[xf$delta==1])
CC_var  <- var(xf$cost[xf$delta==1])/sum(xf$delta)
# Results
CC_full <- c(CC,
CC_var,
sqrt(CC_var),
CC + 1.96 * sqrt(CC_var),
CC - 1.96 * sqrt(CC_var))
# #################################################################
# ##                          section 4:                         ##
# ##                     Lin's method (1997)                     ##
# #################################################################
#
# # Kaplan-meier for censoring distribution get censoring times to define intervals
# sc <- summary(survfit(Surv(xf$surv, xf$delta == 0) ~ 1))
# censBreaks <- c(0, sc$time, Inf)
#
# # calculate average costs of patients deceased within each interval
# a <- subset(xf, delta == 1) %>%
#     mutate(ints = cut(surv, breaks = censBreaks, dig.lab = 5)) %>%
#     group_by(ints) %>%
#     summarise(mean = mean(cost))
#
# # Get survival times for intervals
# sd <- survfit(Surv(xf$surv, xf$delta == 1) ~ 1)
# intLow <- as.numeric(gsub("\\(", "", sapply(strsplit(as.character(a$ints), ","), function(x) x[[1]])))
# intHigh <- as.numeric(gsub("\\]", "", sapply(strsplit(as.character(a$ints), ","), function(x) x[[2]])))
# svLow <- summary(sd, times = intLow)$surv
# svHigh <- c(summary(sd, times = intHigh)$surv)
# if(length(svHigh) < length(svLow)){ ## Add zero if last value of intHigh is Inf
# 	svHigh <- c(svHigh,0)
# }
#
# # Gathering the data in a new dataframe
# d <- data.frame(a, "survDif" = svLow-svHigh)
#
# # calculating Lin's T estimate of total costs
# LinT <- sum(d$survDif*d$mean, na.rm=T)
#################################################################
##                          section 5:                         ##
##               Bang and Tsiatis's method (2000)              ##
#################################################################
# Kaplan-Meier curve for censoring
sc <- summary(survfit(Surv(xf$surv, xf$delta == 0) ~ 1), times = xf$surv)
sct <- data.frame(sc$time, sc$surv)
sct$sc.surv[sct$sc.surv == 0] <- min(sct$sc.surv[sct$sc.surv != 0])
sct <- unique(sct)
## Kaplan-Meier curve for survival
s <- summary(survfit(Surv(xf$surv, xf$delta) ~ 1), times = xf$surv)
st <- data.frame(s$time, s$surv)
st <- unique(st)
# Merge probalities of censoring and survival to data
t <- merge(xf, sct, by.x = "surv", by.y = "sc.time", all.x = T)
t <- merge(t, st, by.x = "surv", by.y = "s.time", all.x = T)
# Calculate Bang and Tsiatis cost estimator
BT <- mean((t$cost*t$delta)/t$sc.surv)
# Variance of BT
n <- length(t$cost)
t$GA <- rep(0, n)
t$GB <- rep(0, n)
for(i in 1:n){
if(t$delta[i] == 1) next
t2 <- subset(t, surv >= t$surv[i])
t$GA[i] <- (1 / (n*t$s.surv[i])) * sum(t2$delta * t2$cost^2 / t2$sc.surv)
t$GB[i] <- (1 / (n*t$s.surv[i])) * sum(t2$delta * t2$cost / t2$sc.surv)
}
BT_var <- 1 / n * (mean(t$delta * (t$cost-BT)^2 / t$sc.surv) +
mean(((1 - t$delta) / t$sc.surv^2 ) * (t$GA - t$GB^2)))
# Results
BT_full <- c(BT,
BT_var,
sqrt(BT_var),
BT + 1.96 * sqrt(BT_var),
BT - 1.96 * sqrt(BT_var))
#################################################################
##                          section 6:                         ##
##                Zhao and Tian's method (2001)                ##
#################################################################
## For each censored individual i calculate cost
## of longer surviving individuals up till time ti
runCostMatrix <- matrix(0, nrow = nrow(t), ncol = nrow(t))
t$mcostlsurv <- 0
t$mcostlsurvSq <- 0
for(i in 1:nrow(t)){
if(t$delta[i] == 1){
next
} else {
x2 <- data.table::as.data.table(x)[start <= t$surv[i]]
x3 <- x2[,cost2 := ifelse(stop > t$surv[i], (cost/(stop - start + addInterPol)) * (t$surv[i] - start + addInterPol), cost)]
t_data2 <- x3[, list(cost = sum(cost2), surv = first(surv)), by = list(id)]
# Store in runCostMatrix for kept ids
idIndex                  <- t$id %in% t_data2$id
ids                      <- t$id[idIndex]
runCost                  <- t_data2$cost
names(runCost)           <- t_data2$id
runCostMatrix[idIndex,i] <- runCost[as.character(ids)]
# Get mean runCost for longer surviving ids
t$mcostlsurv[i]   <- mean(t_data2$cost[t_data2$surv >= t$surv[i]])
t$mcostlsurvSq[i] <- mean(t_data2$cost[t_data2$surv >= t$surv[i]]^2)
}
}
ZT <- mean((t$delta * (t$cost / t$sc.surv))) + mean(((1-t$delta) * ((t$cost-t$mcostlsurv) / t$sc.surv)), na.rm=T)
## Variance of ZT
n <- nrow(t)
t$gm  <- rep(0,n)
t$gmm <- rep(0,n)
for(i in 1:n){
if(t$delta[i] == 1) next
t$gm[i]  <- (1/(n*t$s.surv[i])) * sum(as.numeric(t$surv >= t$surv[i]) * t$delta * runCostMatrix[,i] / t$sc.surv)
t$gmm[i] <- (1/(n*t$s.surv[i])) * sum(as.numeric(t$surv >= t$surv[i]) * t$delta * t$cost * runCostMatrix[,i] / t$sc.surv)
}
ZT_var <- BT_var - (2/n^2) * sum(((1-t$delta) /  t$sc.surv^2) * (t$gmm - t$GB * t$gm)) +
(1/n^2) * sum(((1-t$delta) /  t$sc.surv^2) * (t$mcostlsurvSq - t$mcostlsurv^2))
# Results
ZT_full <- c(ZT,
ZT_var,
sqrt(ZT_var),
ZT + 1.96 * sqrt(ZT_var),
ZT - 1.96 * sqrt(ZT_var))
#################################################################
##                          section 7:                         ##
##                           Results                           ##
#################################################################
svl1 <- survival::survfit(Surv(xf$surv, xf$delta == 1) ~ 1)
svl2 <- survival:::survmean(svl1, rmean = L)
results <- list(Text  = c("ccostr - Estimates of mean cost with censored data"),
Data  = data.frame(Observations = nrow(x),
Induviduals  = nrow(xf),
Events       = sum(xf$delta == 1),
Limits       = L,
TotalTime    = sum(xf$surv),
MaxSurv      = L2,
row.names    = "N"),
First = data.frame(AS, CC, BT, ZT),
Estimates = round(data.frame("AvailableSample" = AS_full,
"CompleteCase"    = CC_full,
"BT"              = BT_full,
"ZT"              = ZT_full,
row.names         = c("Estimate", "Variance", "SD", "95UCI", "95LCI")),2),
Survival = svl2
)
class(results) <- "ccobject"
results
}
ccmean2(hcost)
library(ccostr)
ccmean(hcost)
ccmean2(hcost)
install.packages("roxygen2")
